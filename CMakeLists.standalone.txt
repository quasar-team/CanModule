# Â© Copyright CERN, Geneva, Switzerland, 2016.  All rights not expressly granted are reserved.
#
#   Created on: Wed Aug 30 10:15:57 CEST 2017
# 
#  		Author: Michael Ludwig <michael.ludwig@cern.ch>
#       Contributors and prior art: Benjamin Farnham, Piotr Nikiel, Viacheslav Filimonov
# 
#  This file is part of the CAN Common Tools project and is the property of CERN, Geneva, Switzerland,
#  and is not free software, since it builds on top of vendor
#  specific communication interfaces and architectures, which are generally non-free and
#  are subject to licensing and/or registration. Please refer to the relevant
#  collaboration agreements between CERN ICS and the vendors for further details.
# 
#  The non-vendor specific parts of the software can be made available on request
#  under the GNU Lesser General Public Licence,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU Lesser General Public Licence for more details <http://www.gnu.org/licenses/>.
#  
# Authors: Viatcheslav Filimonov, Piotr Nikiel, Ben Farnham, Michael Ludwig ("the quasar team from Atlas and BE-ICS")
#

# this is a straightforward CMakeLists.txt without the need for a toolchain to build shared or static CanModule lib as a standalone
cmake_minimum_required(VERSION 3.0)

project( CanModuleStandalone LANGUAGES C CXX  VERSION 2.0.23  )  
message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: CanModuleStandalone version= ${PROJECT_VERSION}" )
cmake_policy(SET CMP0054 NEW)


SET( CMAKE_VERBOSE_MAKEFILE ON )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/lib ) # the static lib is just thrown into build, a cmake bug, probably
SET( CMAKE_COLOR_MAKEFILE ON )
SET( CMAKE_CXX_STANDARD 11 ) 
SET( CMAKE_CXX_STANDARD_REQUIRED ON )
SET( CMAKE_POSITION_INDEPENDENT_CODE TRUE )
SET( CMAKE_BUILD_TYPE Release )

# use env
IF ( $ENV{CANMODULE_AS_STATIC_AS_POSSIBLE} STREQUAL "true" )
	SET ( CANMODULE_AS_STATIC_AS_POSSIBLE TRUE )
ELSE()
	SET ( CANMODULE_AS_STATIC_AS_POSSIBLE FALSE )
ENDIF()

#
# LogIt
#
# set the LogIt options
SET( OPCUA_TOOLKIT_BASE_DIRECTORY /opt/3rdPartySoftware/UnifiedAutomation/1.7.7-549/sdk )
SET( LOGIT_BUILD_OPTION "LOGIT_AS_INT_SRC" CACHE STRING "LogIt is a mandatory dependency of CanModule. Inclusion options LOGIT_AS_INT_SRC, LOGIT_AS_EXT_SHARED, LOGIT_AS_EXT_STATIC")
set_property( CACHE LOGIT_BUILD_OPTION PROPERTY STRINGS LOGIT_AS_INT_SRC LOGIT_AS_EXT_SHARED LOGIT_AS_EXT_STATIC)
option( LOGIT_BACKEND_STDOUTLOG "The basic back-end: logs to stdout" ON )
option( LOGIT_BACKEND_BOOSTLOG "Rotating file logger back-end: fixed size on disk based on boost logging library" ON )
option( LOGIT_BACKEND_UATRACE "UnifiedAutomation toolkit logger" OFF ) # OPCUA-2027, rejected
option( LOGIT_BACKEND_WINDOWS_DEBUGGER "Windows debugger logger" OFF )
option( LOGIT_BUILD_SHARED_LIB "Build a LogIt shared library if ON (otherwise builds an object library)" ON )

if ( ${LOGIT_BACKEND_UATRACE} )
	message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: LogIt building with UATRACE]")
	if ( NOT DEFINED OPCUA_TOOLKIT_BASE_DIRECTORY )
		message( FATAL_ERROR "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: OPCUA_TOOLKIT_BASE_DIRECTORY is missing]")
		# e.g.: /opt/3rdPartySoftware/UnifiedAutomation/1.5.5/sdk
	else()
		message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: OPCUA_TOOLKIT_BASE_DIRECTORY = ${OPCUA_TOOLKIT_BASE_DIRECTORY}]")
		include_directories ( ${OPCUA_TOOLKIT_BASE_DIRECTORY}/include/uabasecpp ${OPCUA_TOOLKIT_BASE_DIRECTORY}/include/uastack 	) 
		set  ( LOGIT_DEPENDENCIES "-luabase -luastack" )
		link_directories( ${OPCUA_TOOLKIT_BASE_DIRECTORY}/lib )
	endif()
else()
	message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: LogIt building without UATRACE]")
endif()

# pb with uatrace logic: to be fixed. It should be possible to build LogIt without uatrace
include_directories ( ${OPCUA_TOOLKIT_BASE_DIRECTORY}/include/uabasecpp ${OPCUA_TOOLKIT_BASE_DIRECTORY}/include/uastack 	) 
link_directories( ${OPCUA_TOOLKIT_BASE_DIRECTORY}/lib )



# compiler/build flags
IF (WIN32)
  	message( STATUS " ${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: Windows build" )
	add_definitions(-DSUPPORT_XML_CONFIG -W0 -DWIN32_LEAN_AND_MEAN )
	add_definitions(-D_WIN32_WINDOWS)
	add_definitions("/EHsc")
	
	# dynamic linking, no static yet available. Wait for v3/anagate 2023
	SET(CMAKE_CXX_FLAGS_RELEASE "/MD")
	SET(CMAKE_CXX_FLAGS_DEBUG "/MDd /Zi")
	
	SET( CMAKE_EXE_LINKER_FLAGS     "${CMAKE_EXE_LINKER_FLAGS}    /MACHINE:X64" )
	SET( CMAKE_SHARED_LINKER_FLAGS  "${CMAKE_SHARED_LINKER_FLAGS} /MACHINE:X64" )
	SET( CMAKE_STATIC_LINKER_FLAGS  "${CMAKE_STATIC_LINKER_FLAGS} /MACHINE:X64" )
	SET( CMAKE_MODULE_LINKER_FLAGS  "${CMAKE_MODULE_LINKER_FLAGS} /MACHINE:X64" )
	
	find_package(Threads REQUIRED)
	#set ( SYSLIBS ${LOGIT_DEPENDENCIES} ${CMAKE_THREAD_LIBS_INIT} )
ELSE()
  	message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: Linux build" )
	IF ( ${CANMODULE_AS_STATIC_AS_POSSIBLE} )
		# still, CANX is dyn linked, just get rid of socketcan, xerces and boost
		add_definitions( -Wall -Wno-deprecated -std=c++11 -Wno-literal-suffix -D_CERN_CC7 -O3  )
 	ELSE()
		add_definitions( -Wall -Wno-deprecated -std=c++11 -Wno-literal-suffix -D_CERN_CC7 -O3 -DBOOST_LOG_DYN_LINK )
	ENDIF()
	#set ( SYSLIBS ${LOGIT_DEPENDENCIES} "-ldl -lc -lm -lpthread")	
ENDIF()


# we have a mock up build without any vendor libs as well, for CI where we don't want to distribute vendors
message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}] building vendors [CANMODULE_BUILD_VENDORS:${CANMODULE_BUILD_VENDORS}]")


# pull in LogIt as sources. Don't clone if dir exists already. 
function ( clone_LogIt ) 
  SET (LOGIT_VERSION "master")
  message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: cloning LogIt from github. *NOTE* cloning version [${LOGIT_VERSION}]")
  if ( NOT EXISTS ${PROJECT_BINARY_DIR}/LogIt ) 
	  execute_process(COMMAND git clone -b ${LOGIT_VERSION} https://github.com/quasar-team/LogIt.git WORKING_DIRECTORY ${PROJECT_BINARY_DIR}  )
	  message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: LogIt cloned from LogIt repo into ${PROJECT_BINARY_DIR}/LogIt")
   ELSE()
	  message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: Logit is already cloned into ${PROJECT_BINARY_DIR}/LogIt" )
   ENDIF() 
   set ( LOGIT_HEADERS ${PROJECT_BINARY_DIR}/LogIt/include ) # some bw compatibility, otherwise maybe useless
   include_directories( ${PROJECT_BINARY_DIR}/LogIt/include )
endfunction()

#
# boost
#
SET ( BOOST_PATH_LIBS "/opt/3rdPartySoftware/boost/boost_1_75_0/stage/lib" )
SET ( BOOST_PATH_HEADERS   "/opt/3rdPartySoftware/boost/boost_1_75_0" )
IF ( ${CANMODULE_AS_STATIC_AS_POSSIBLE} )
	message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: as static as possible" )
	SET ( BOOST_LIBS
	libboost_log.a 
	libboost_log_setup.a 
	libboost_system.a 
	libboost_chrono.a 
	libboost_thread.a 
	libboost_date_time.a 
	libboost_filesystem.a 
	libboost_program_options.a 
	)
ELSE()
	message( STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: shared libs" )
	SET ( BOOST_LIBS
	-lboost_log 
	-lboost_log_setup 
	-lboost_system
	-lboost_chrono 
	-lboost_thread
	-lboost_date_time 
	-lboost_filesystem 
	-lboost_program_options 
  )
ENDIF()

#
# xerces-c
#
SET ( XERCES_LIBS "-lxerces-c" )


# build behaviour:
# CANMODULE_BUILD_VENDORS OFF or not specified: only build mockup, do not build any vendor libs (default phony)
# CANMODULE_BUILD_VENDORS ON, nothing else: build mockup and all vendor libs (default all on)
# CANMODULE_BUILD_VENDORS ON, CANMODULE_BUILD_SYSTEC OFF: build mockup and all vendor libs except systec (drop systec)
# CANMODULE_BUILD_VENDORS ON, CANMODULE_BUILD_ANAGATE OFF: build mockup and all vendor libs except anagate (drop anagate)
# CANMODULE_BUILD_VENDORS ON, CANMODULE_BUILD_PEAK OFF: build mockup and all vendor libs except peak (drop peak)
IF(	NOT DEFINED CANMODULE_BUILD_SYSTEC )
	SET(CANMODULE_BUILD_SYSTEC "ON")
ENDIF()
IF(	NOT DEFINED CANMODULE_BUILD_ANAGATE )
	SET(CANMODULE_BUILD_ANAGATE "ON")
ENDIF()
IF(	NOT DEFINED CANMODULE_BUILD_PEAK )
	SET(CANMODULE_BUILD_PEAK "ON")
ENDIF()

message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}] build systec  [CANMODULE_BUILD_SYSTEC:${CANMODULE_BUILD_SYSTEC}]")
message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}] build anagate [CANMODULE_BUILD_ANAGATE:${CANMODULE_BUILD_ANAGATE}]")
message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}] build peak    [CANMODULE_BUILD_PEAK:${CANMODULE_BUILD_PEAK}]")



message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: LogIt build option LOGIT_BUILD_OPTION [${LOGIT_BUILD_OPTION}]")
#SET ( LOGIT_HEADERS   "CanModule/LogIt/include" )
#SET ( LOGIT_PATH_LIBS "CanModule/LogIt/lib" )
#SET ( LOGIT_LIBS "-lLogIt" )
clone_LogIt()


# versioning burnt into the bins, but don't overwrite in the build if exists
if (NOT EXISTS ${PROJECT_SOURCE_DIR}/CanInterface/include/VERSION.h )
	file(WRITE ${PROJECT_SOURCE_DIR}/CanInterface/include/VERSION.h "// VERSION.h - do not edit\n#define CanModule_VERSION \"${PROJECT_VERSION}\"" )
	message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: generated VERSION.h into ${PROJECT_SOURCE_DIR}/CanInterface/include/")
ELSE()
	message(STATUS "[${CMAKE_CURRENT_LIST_FILE}:${CMAKE_CURRENT_LIST_LINE}]: CanModule VERSION.h exists already in ${PROJECT_SOURCE_DIR}/CanInterface/include/, don't touch it")
ENDIF()

SET ( SRCS_ALL_OS 
	./CanInterface/src/CCanAccess.cpp
	./CanInterface/src/CanBusAccess.cpp
	./CanInterface/src/CanModuleUtils.cpp
	./CanInterface/src/CanStatistics.cpp
	./CanLibLoader/src/CanLibLoader.cpp
	#./CanModuleTest/src/CanModuleTest.cpp
	#./CanModuleTest/src/main.cpp
	./Diagnostic/src/Diag.cpp
)

SET ( SRCS_OS_WIN
	./CanLibLoader/src/CanLibLoaderWin.cpp
)
SET ( SRCS_OS_LIN 
	./CanLibLoader/src/CanLibLoaderLin.cpp
)


SET ( SRCS_DEPS 
	./build/LogIt/src/BoostRotatingFileLog.cpp
	./build/LogIt/src/ComponentAttributes.cpp
	./build/LogIt/src/LogIt.cpp
	./build/LogIt/src/LogItInstance.cpp
	./build/LogIt/src/LogLevels.cpp
	./build/LogIt/src/LogRecord.cpp
	./build/LogIt/src/LogSinks.cpp
	./build/LogIt/src/StdOutLog.cpp
	./build/LogIt/src/UaTraceSink.cpp
	./build/LogIt/src/WindowsDebuggerSink.cpp
)

IF (WIN32)
	SET ( SRCS ${SRCS_ALL_OS} ${SRCS_OS_WIN} ${SRCS_DEPS} )
ELSE()
	SET ( SRCS ${SRCS_ALL_OS} ${SRCS_OS_LIN} ${SRCS_DEPS} )
ENDIF()

include_directories( CanInterface/include CanLibLoader/include Diagnostic/include CanModuleTest/include )
include_directories ( ${BOOST_PATH_HEADERS} )
link_directories( ${BOOST_PATH_LIBS} )

IF ( ${CANMODULE_AS_STATIC_AS_POSSIBLE} )
	SET ( TARGET_NAME CanModule_standalone_static )
	SET ( LINK_OPTION STATIC )
ELSE()
	SET ( TARGET_NAME CanModule_standalone_shared )
	SET ( LINK_OPTION SHARED )
ENDIF()

add_library( ${TARGET_NAME} ${LINK_OPTION} ${SRCS} )

