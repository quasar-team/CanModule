<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="MockCanAccess_8h" kind="file" language="C++">
    <compoundname>MockCanAccess.h</compoundname>
    <includes local="no">string</includes>
    <includes refid="CanStatistics_8h" local="yes">CanStatistics.h</includes>
    <includes refid="CCanAccess_8h" local="yes">CCanAccess.h</includes>
    <includedby refid="MockCanAccess_8cpp" local="yes">CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.cpp</includedby>
    <incdepgraph>
      <node id="10">
        <label>atomic</label>
      </node>
      <node id="1">
        <label>CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h</label>
        <link refid="MockCanAccess_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stdatomic.h</label>
      </node>
      <node id="15">
        <label>LogIt.h</label>
      </node>
      <node id="3">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="13">
        <label>boost/bind/bind.hpp</label>
      </node>
      <node id="12">
        <label>condition_variable</label>
      </node>
      <node id="5">
        <label>sys/time.h</label>
      </node>
      <node id="11">
        <label>mutex</label>
      </node>
      <node id="7">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="6">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="17">
        <label>VERSION.h</label>
        <link refid="VERSION_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h</label>
        <link refid="MockCanAccess_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.cpp</label>
        <link refid="MockCanAccess_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classMockCanAccess" prot="public">MockCanAccess</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="MockCanAccess_8h_1af8ac2352c89d82a9696dc9dc29ba8b77" prot="public" static="no">
        <name>CAN_ECHO_MSG</name>
        <initializer>(unsigned char*)(&quot;0000EC40&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h" line="27" column="9" bodyfile="CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="MockCanAccess_8h_1ad342ac907eb044443153a22f964bf0af" prot="public" static="no">
        <type>unsigned long</type>
        <definition>typedef unsigned long DWORD</definition>
        <argsstring></argsstring>
        <name>DWORD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h" line="23" column="23" bodyfile="CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>MockCanAccess.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Feb<sp/>23,<sp/>2018</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>ben<sp/>farnham</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>MOCKCANACCESS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MOCKCANACCESS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanStatistics_8h" kindref="compound">CanStatistics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CCanAccess_8h" kindref="compound">CCanAccess.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tchar.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Winsock2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;windows.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="MockCanAccess_8h_1ad342ac907eb044443153a22f964bf0af" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="MockCanAccess_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="MockCanAccess_8h_1af8ac2352c89d82a9696dc9dc29ba8b77" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_ECHO_MSG<sp/>(unsigned<sp/>char*)(&quot;0000EC40&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>an<sp/>implementation<sp/>of<sp/>the<sp/>abstract<sp/>class<sp/>CCanAccess.<sp/>It<sp/>serves<sp/>as<sp/>a<sp/>can<sp/>bus<sp/>access<sp/>layer<sp/>that<sp/>will<sp/>communicate<sp/>with<sp/>Systec<sp/>crates<sp/>(Windows<sp/>only)</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="classMockCanAccess" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classMockCanAccess" kindref="compound">MockCanAccess</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CanModule::CCanAccess</ref></highlight></codeline>
<codeline lineno="33"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMockCanAccess_1a5a5c76c0d3ba4276e98f56f81f8116a3" kindref="member">MockCanAccess</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a87261ff4a42e3b4d0f02939e7adc39d3" kindref="member">~MockCanAccess</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Disable<sp/>copy<sp/>constructor<sp/>&amp;&amp;<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMockCanAccess_1a5a5c76c0d3ba4276e98f56f81f8116a3" kindref="member">MockCanAccess</ref>(<ref refid="classMockCanAccess" kindref="compound">MockCanAccess</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classMockCanAccess" kindref="compound">MockCanAccess</ref>&amp;<sp/><ref refid="classMockCanAccess_1a20469d64d4d207c793140d46f61ad874" kindref="member">operator=</ref>(<ref refid="classMockCanAccess" kindref="compound">MockCanAccess</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Required<sp/>overrides<sp/>of<sp/>abstract<sp/>base<sp/>class<sp/>CCanAccess</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1aa0b0694c0fa6409136eaa213fe129e61" kindref="member">createBus</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parameters);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a584734691bc9d4d49c5ccb795ab5d526" kindref="member">sendRemoteRequest</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cobID);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a95856b7b3ac143d7c5bd7bd807c06fd5" kindref="member">sendMessage</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cobID,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rtr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a73d7565174206d2c58f81040a6438541" kindref="member">getStatistics</ref>(<sp/><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanModule::CanStatistics</ref><sp/>&amp;<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a33b2dab953237d0e302eaa82d08a923b" kindref="member">initialiseLogging</ref>(LogItInstance*<sp/>remoteInstance);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classMockCanAccess_1aa7b4edb24afec475727619a3f2e1f444" kindref="member">getCanMessageDataAsString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>data,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&amp;<sp/>len<sp/>=<sp/>8);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classMockCanAccess_1a76b9aba43928afc77b9ef25f0289d0a7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a76b9aba43928afc77b9ef25f0289d0a7" kindref="member">setReconnectBehavior</ref>(<sp/><ref refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbb" kindref="member">CanModule::ReconnectAutoCondition</ref><sp/>cond,<sp/><ref refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5" kindref="member">CanModule::ReconnectAction</ref><sp/>action<sp/>){}</highlight></codeline>
<codeline lineno="54" refid="classMockCanAccess_1ac626da0d02537e59c9d4bf9c631cec1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1ac626da0d02537e59c9d4bf9c631cec1b" kindref="member">setReconnectReceptionTimeout</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>timeout<sp/>){<sp/><sp/><ref refid="classCanModule_1_1CCanAccess_1a4ddc9691fd9d42bcc7cb14ceae24da82" kindref="member">m_timeoutOnReception</ref><sp/>=<sp/>timeout;<sp/>};</highlight></codeline>
<codeline lineno="55" refid="classMockCanAccess_1abfb4be10500a4960b163433b5c06d22f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1abfb4be10500a4960b163433b5c06d22f" kindref="member">setReconnectFailedSendCount</ref>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>){<sp/><ref refid="classCanModule_1_1CCanAccess_1a7853071979a549dc701dc06124bf1366" kindref="member">m_maxFailedSendCount</ref><sp/>=<sp/><ref refid="classCanModule_1_1CCanAccess_1a921748fa6f0da92c7afef60f41007a3e" kindref="member">m_failedSendCountdown</ref><sp/>=<sp/>c;<sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56" refid="classMockCanAccess_1ac34bb818b8f9dbc5d3c9f44cdf4cf9dd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbb" kindref="member">CanModule::ReconnectAutoCondition</ref><sp/><ref refid="classMockCanAccess_1ac34bb818b8f9dbc5d3c9f44cdf4cf9dd" kindref="member">getReconnectCondition</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess_1abfd40edc34a777a5ff4503a6e8a239d6" kindref="member">m_reconnectCondition</ref>;<sp/>};</highlight></codeline>
<codeline lineno="57" refid="classMockCanAccess_1a489f003ba0c428037c5530f475c7c2f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5" kindref="member">CanModule::ReconnectAction</ref><sp/><ref refid="classMockCanAccess_1a489f003ba0c428037c5530f475c7c2f6" kindref="member">getReconnectAction</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess_1a6baf24c56eb715adf55a569d08b12c25" kindref="member">m_reconnectAction</ref>;<sp/>};</highlight></codeline>
<codeline lineno="58" refid="classMockCanAccess_1a24e126b0ab5c70464a05ffa7286b91e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="classMockCanAccess_1a24e126b0ab5c70464a05ffa7286b91e1" kindref="member">getPortStatus</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0xbebecaca;<sp/>};</highlight></codeline>
<codeline lineno="59" refid="classMockCanAccess_1a198bd6f880c8b12c9aa98584b1c30097" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="classMockCanAccess_1a198bd6f880c8b12c9aa98584b1c30097" kindref="member">getPortBitrate</ref>(){<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess_1a484a4f9dc352fe31b4baff0365095705" kindref="member">m_CanParameters</ref>.<ref refid="structCanModule_1_1CanParameters_1a53ce17e16c2a818ffbc05904d9e56e11" kindref="member">m_lBaudRate</ref>;<sp/>};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1ae9738cfb2774d75ead6dda2bd47922b9" kindref="member">stopBus</ref><sp/>();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Instance<sp/>of<sp/>Can<sp/>Statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classMockCanAccess_1ae581d0d291f4717be3887ff63ebca063" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanModule::CanStatistics</ref><sp/><ref refid="classMockCanAccess_1ae581d0d291f4717be3887ff63ebca063" kindref="member">m_statistics</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Current<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classMockCanAccess_1aa8c1a3282b1ec8a2295faaac6c067824" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1aa8c1a3282b1ec8a2295faaac6c067824" kindref="member">m_baudRate</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classMockCanAccess_1a29a88ae9112fba3f4176091425d8bc9d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classMockCanAccess_1a29a88ae9112fba3f4176091425d8bc9d" kindref="member">st_CCanAccess_icount</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//MOCKCANACCESS_H_</highlight></codeline>
    </programlisting>
    <location file="CanInterfaceImplementations/unitTestMockUpImplementation/MockCanAccess.h"/>
  </compounddef>
</doxygen>
