<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ExecCommand_8h" kind="file" language="C++">
    <compoundname>ExecCommand.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sstream</includes>
    <includes local="no">iostream</includes>
    <includedby refid="ExecCommand_8cpp" local="yes">CanInterfaceImplementations/sockcan/ExecCommand.cpp</includedby>
    <includedby refid="UdevAnalyserForPeak_8cpp" local="yes">CanInterfaceImplementations/sockcan/UdevAnalyserForPeak.cpp</includedby>
    <incdepgraph>
      <node id="5">
        <label>stdexcept</label>
      </node>
      <node id="1">
        <label>CanInterfaceImplementations/sockcan/ExecCommand.h</label>
        <link refid="ExecCommand_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="6">
        <label>sstream</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>CanInterfaceImplementations/sockcan/ExecCommand.cpp</label>
        <link refid="ExecCommand_8cpp"/>
      </node>
      <node id="1">
        <label>CanInterfaceImplementations/sockcan/ExecCommand.h</label>
        <link refid="ExecCommand_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>CanInterfaceImplementations/sockcan/UdevAnalyserForPeak.cpp</label>
        <link refid="UdevAnalyserForPeak_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classexeccommand__ns_1_1ExecCommand" prot="public">execcommand_ns::ExecCommand</innerclass>
    <innerclass refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer" prot="private">execcommand_ns::ExecCommand::Displayer</innerclass>
    <innernamespace refid="namespaceexeccommand__ns">execcommand_ns</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>ExecCommand.h</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Mar<sp/>9,<sp/>2020</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>mludwig</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>copied<sp/>from</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>https://www.linuxquestions.org/questions/programming-9/how-to-get-info-from-system-calls-in-linux-using-c-677436/</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>SIMPLETEST6_CANMODULE_CANINTERFACEIMPLEMENTATIONS_SOCKCAN_EXECCOMMAND_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMPLETEST6_CANMODULE_CANINTERFACEIMPLEMENTATIONS_SOCKCAN_EXECCOMMAND_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceexeccommand__ns" kindref="compound">execcommand_ns</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="classexeccommand__ns_1_1ExecCommand" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexeccommand__ns_1_1ExecCommand" kindref="compound">ExecCommand</ref><sp/>{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="24" refid="classexeccommand__ns_1_1ExecCommand_1a845d6035374fe25c0c68bea83f64f4b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a845d6035374fe25c0c68bea83f64f4b5" kindref="member">CmdResults</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="classexeccommand__ns_1_1ExecCommand_1aeedf8d30a7dd147e72af0395e15e3463" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1aeedf8d30a7dd147e72af0395e15e3463" kindref="member">ExecCommand</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cmd<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*pfd<sp/>=<sp/>popen(<sp/>cmd.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>pfd<sp/>&lt;=<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/></highlight><highlight class="stringliteral">&quot;Command<sp/>or<sp/>process<sp/>could<sp/>not<sp/>be<sp/>executed.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!feof(pfd)<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[<sp/>1024<sp/>]<sp/>=<sp/>{0};</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>fgets(buf,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buf),<sp/>pfd)<sp/>&gt;<sp/>0<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>str(buf);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" kindref="member">m_results</ref>.push_back(<sp/>str.substr(0,<sp/>str.length()-1)<sp/>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pclose(<sp/>pfd<sp/>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classexeccommand__ns_1_1ExecCommand_1aa85d0c7383bce43ba756006b64505d23" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a845d6035374fe25c0c68bea83f64f4b5" kindref="member">CmdResults</ref><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1aa85d0c7383bce43ba756006b64505d23" kindref="member">getResults</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" kindref="member">m_results</ref>;<sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classexeccommand__ns_1_1ExecCommand_1a9451655efca44adb63da51f6ddcd3ba7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a9451655efca44adb63da51f6ddcd3ba7" kindref="member">operator&lt;&lt;</ref>(<sp/>std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classexeccommand__ns_1_1ExecCommand" kindref="compound">ExecCommand</ref><sp/>&amp;exec<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::for_each(<sp/>exec.<ref refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" kindref="member">m_results</ref>.begin(),<sp/>exec.<ref refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" kindref="member">m_results</ref>.end(),<sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer" kindref="compound">ExecCommand::Displayer</ref>(os)<sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="52" refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer" kindref="compound">Displayer</ref><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="54" refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1a7aa30b72cba32d984c840662b0ebfdc5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1a7aa30b72cba32d984c840662b0ebfdc5" kindref="member">Displayer</ref>(<sp/>std::ostream<sp/>&amp;os<sp/>)<sp/>:<sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1abb2774f1c0aa2b6c4e77447f8b657dfa" kindref="member">m_os</ref>(os)<sp/>{}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1ae52f92efedfe0568f9685f28369fc1b6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1ae52f92efedfe0568f9685f28369fc1b6" kindref="member">operator()</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;str<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1abb2774f1c0aa2b6c4e77447f8b657dfa" kindref="member">m_os</ref><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61" refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1abb2774f1c0aa2b6c4e77447f8b657dfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream<sp/>&amp;<ref refid="classexeccommand__ns_1_1ExecCommand_1_1Displayer_1abb2774f1c0aa2b6c4e77447f8b657dfa" kindref="member">m_os</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="63" refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a845d6035374fe25c0c68bea83f64f4b5" kindref="member">CmdResults</ref><sp/><ref refid="classexeccommand__ns_1_1ExecCommand_1a557d1e18086d1b3edbe91ed2e84c7d73" kindref="member">m_results</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">};</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>execcommand_ns<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SIMPLETEST6_CANMODULE_CANINTERFACEIMPLEMENTATIONS_SOCKCAN_EXECCOMMAND_H_<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="CanInterfaceImplementations/sockcan/ExecCommand.h"/>
  </compounddef>
</doxygen>
