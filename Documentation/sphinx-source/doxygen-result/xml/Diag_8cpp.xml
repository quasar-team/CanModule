<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Diag_8cpp" kind="file" language="C++">
    <compoundname>Diag.cpp</compoundname>
    <includes refid="Diag_8h" local="yes">Diag.h</includes>
    <incdepgraph>
      <node id="14">
        <label>stdatomic.h</label>
      </node>
      <node id="8">
        <label>LogIt.h</label>
      </node>
      <node id="13">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="11">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="19">
        <label>boost/thread/thread.hpp</label>
      </node>
      <node id="12">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="1">
        <label>Diagnostic/src/Diag.cpp</label>
        <link refid="Diag_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>boost/bind/bind.hpp</label>
      </node>
      <node id="17">
        <label>VERSION.h</label>
        <link refid="VERSION_8h"/>
      </node>
      <node id="9">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>sys/time.h</label>
      </node>
      <node id="6">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>mutex</label>
      </node>
      <node id="16">
        <label>chrono</label>
      </node>
      <node id="2">
        <label>Diag.h</label>
        <link refid="Diag_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceCanModule">CanModule</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Diag.cpp</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/><sp/>Created<sp/>on:<sp/>Aug<sp/>25,<sp/>2020</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>Author:<sp/>mludwig</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Diag_8h" kindref="compound">Diag.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCanModule" kindref="compound">CanModule</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1Diag_1a71e31de7bd89a83e624d15a7a4e7a0c9" kindref="member">Diag::CanLibLoader_icount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1Diag_1a1f42c5f2717eb1f36f4f85bb93c5a338" kindref="member">Diag::CanAccess_icount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>Log::LogComponentHandle<sp/><ref refid="classCanModule_1_1Diag_1acbdf0ac17a375b59f6fb0f41c6fdf22a" kindref="member">Diag::lh</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>CCanAccess<sp/>*&gt;<sp/><ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">Diag::port_map</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>CanLibLoader<sp/>*&gt;<sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">Diag::lib_map</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>static<sp/>*/</highlight><highlight class="normal"><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">Diag::parameter_map</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" refkind="member"><highlight class="normal">std::mutex<sp/><ref refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" kindref="member">mtx</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classCanModule_1_1Diag_1a282a54b7181d085ba0abccca8fcb0874" refkind="member"><highlight class="normal"><ref refid="classCanModule_1_1Diag_1a282a54b7181d085ba0abccca8fcb0874" kindref="member">Diag::Diag</ref>()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>LogItInstance<sp/>*logIt<sp/>=<sp/>LogItInstance::getInstance();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>logIt-&gt;getComponentHandle(<sp/><ref refid="namespaceCanModule_1a78730a18f59663871883885f3914a2aa" kindref="member">CanModule::LogItComponentName</ref>,<sp/><ref refid="classCanModule_1_1Diag_1acbdf0ac17a375b59f6fb0f41c6fdf22a" kindref="member">lh</ref><sp/>);</highlight></codeline>
<codeline lineno="25"><highlight class="normal">};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="classCanModule_1_1Diag_1aa79c20827b6e33fa35d4106d9aa479b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1Diag_1aa79c20827b6e33fa35d4106d9aa479b8" kindref="member">Diag::delete_maps</ref>(<ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref><sp/>*lib,<sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*acc<sp/>){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>c0<sp/>=<sp/>lib-&gt;<ref refid="classCanModule_1_1CanLibLoader_1a7b4d0043b9715fce19bca9bb4035df0a" kindref="member">getLibName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/><ref refid="classCanModule_1_1Diag_1a71e31de7bd89a83e624d15a7a4e7a0c9" kindref="member">CanLibLoader_icount</ref><sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>c1<sp/>=<sp/>acc-&gt;<ref refid="classCanModule_1_1CCanAccess_1ac3f5126ae36d642217425e21696d19ca" kindref="member">getBusName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/><ref refid="classCanModule_1_1Diag_1a1f42c5f2717eb1f36f4f85bb93c5a338" kindref="member">CanAccess_icount</ref><sp/>);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>c0<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal"><sp/>+<sp/>c1;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" kindref="member">mtx</ref>.lock();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.erase(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">lib_map</ref>.erase(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">parameter_map</ref>.erase(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" kindref="member">mtx</ref>.unlock();</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classCanModule_1_1Diag_1addd2c4afbe8b21115f487085f3226e8d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1Diag_1addd2c4afbe8b21115f487085f3226e8d" kindref="member">Diag::insert_maps</ref>(<sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref><sp/>*lib,<sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*acc,<sp/>std::string<sp/>params<sp/>){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>c0<sp/>=<sp/>lib-&gt;<ref refid="classCanModule_1_1CanLibLoader_1a7b4d0043b9715fce19bca9bb4035df0a" kindref="member">getLibName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/><ref refid="classCanModule_1_1Diag_1a71e31de7bd89a83e624d15a7a4e7a0c9" kindref="member">CanLibLoader_icount</ref><sp/>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>c1<sp/>=<sp/>acc-&gt;<ref refid="classCanModule_1_1CCanAccess_1ac3f5126ae36d642217425e21696d19ca" kindref="member">getBusName</ref>()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;_&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(<sp/><ref refid="classCanModule_1_1Diag_1a1f42c5f2717eb1f36f4f85bb93c5a338" kindref="member">CanAccess_icount</ref><sp/>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>c0<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;::&quot;</highlight><highlight class="normal"><sp/>+<sp/>c1;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" kindref="member">mtx</ref>.lock();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">lib_map</ref>.find(<sp/>key<sp/>)<sp/>!=<sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">lib_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::INF,<sp/><ref refid="classCanModule_1_1Diag_1acbdf0ac17a375b59f6fb0f41c6fdf22a" kindref="member">lh</ref><sp/>)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>key=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists<sp/>already,<sp/>skip<sp/>lib<sp/>insert&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>CanLibLoader<sp/>*&gt;<sp/>pa0<sp/>=<sp/>std::pair&lt;std::string,<sp/>CanLibLoader<sp/>*&gt;(<sp/>key,<sp/>lib<sp/>);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">lib_map</ref>.insert(<sp/>pa0<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.find(<sp/>key<sp/>)<sp/>!=<sp/><ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::INF,<sp/><ref refid="classCanModule_1_1Diag_1acbdf0ac17a375b59f6fb0f41c6fdf22a" kindref="member">lh</ref><sp/>)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>key=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists<sp/>already,<sp/>skip<sp/>port<sp/>insert&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>CCanAccess<sp/>*&gt;<sp/>pa1<sp/>=<sp/>std::pair&lt;std::string,<sp/>CCanAccess<sp/>*&gt;(<sp/>key,<sp/>acc<sp/>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.insert(<sp/>pa1<sp/>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">parameter_map</ref>.find(<sp/>key<sp/>)<sp/>!=<sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">parameter_map</ref>.end())<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::INF,<sp/><ref refid="classCanModule_1_1Diag_1acbdf0ac17a375b59f6fb0f41c6fdf22a" kindref="member">lh</ref><sp/>)&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>key=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>key<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>exists<sp/>already,<sp/>skip<sp/>parameter<sp/>insert&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::pair&lt;std::string,<sp/>std::string&gt;<sp/>pa2<sp/>=<sp/>std::pair&lt;std::string,<sp/>std::string&gt;(<sp/>key,<sp/>params<sp/>);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">parameter_map</ref>.insert(<sp/>pa2<sp/>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceCanModule_1a30152f28b688b7faa77e56732989f4de" kindref="member">mtx</ref>.unlock();</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classCanModule_1_1Diag_1afcea76f7b51b8fa0996b7574abc03c46" refkind="member"><highlight class="normal">vector&lt;Diag::CONNECTION_DIAG_t&gt;<sp/><ref refid="classCanModule_1_1Diag_1afcea76f7b51b8fa0996b7574abc03c46" kindref="member">Diag::get_connections</ref>(){</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;Diag::CONNECTION_DIAG_t&gt;<sp/>vreturn;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;std::string,<sp/>CCanAccess<sp/>*&gt;::iterator<sp/>it=<ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.begin();<sp/>it!=<ref refid="classCanModule_1_1Diag_1a1f761ca050e1c4f3da1f219218c541c9" kindref="member">port_map</ref>.end();<sp/>++it){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structCanModule_1_1Diag_1_1CONNECTION__DIAG__t" kindref="compound">Diag::CONNECTION_DIAG_t</ref><sp/>c;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>key<sp/>=<sp/>it-&gt;first;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="structCanModule_1_1Diag_1_1CONNECTION__DIAG__t_1aa5b85c2aa4300d4cd8da18e8b8e32be1" kindref="member">bus</ref><sp/>=<sp/>it-&gt;second-&gt;getBusName();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="structCanModule_1_1Diag_1_1CONNECTION__DIAG__t_1a94f9b3b1352605e99904352667c013c5" kindref="member">lib</ref><sp/>=<sp/><ref refid="classCanModule_1_1Diag_1a2fb2c9c6a0cd7ad1acd2e505ebde3beb" kindref="member">lib_map</ref>.find(<sp/>key<sp/>)-&gt;second-&gt;getLibName();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="structCanModule_1_1Diag_1_1CONNECTION__DIAG__t_1a2bd7ac2df6af5b06078aa0329db9fd7b" kindref="member">parameter</ref><sp/>=<sp/><ref refid="classCanModule_1_1Diag_1aca8bc6fe0248257cbc526f9485c287cb" kindref="member">parameter_map</ref>.find(<sp/>key<sp/>)-&gt;second;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vreturn.push_back(<sp/>c<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(<sp/>vreturn<sp/>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="Diagnostic/src/Diag.cpp"/>
  </compounddef>
</doxygen>
