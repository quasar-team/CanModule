<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="CanLibLoaderWin_8cpp" kind="file">
    <compoundname>CanLibLoaderWin.cpp</compoundname>
    <includes refid="CanLibLoaderWin_8h" local="yes">CanLibLoaderWin.h</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sstream</includes>
    <includes local="yes">LogIt.h</includes>
    <incdepgraph>
      <node id="494">
        <label>stdatomic.h</label>
      </node>
      <node id="497">
        <label>LogIt.h</label>
      </node>
      <node id="483">
        <label>windows.h</label>
      </node>
      <node id="493">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="494" relation="include">
        </childnode>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
        <childnode refid="496" relation="include">
        </childnode>
      </node>
      <node id="491">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="481">
        <label>CanLibLoader/src/CanLibLoaderWin.cpp</label>
        <link refid="CanLibLoaderWin.cpp"/>
        <childnode refid="482" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="498" relation="include">
        </childnode>
        <childnode refid="499" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
      <node id="484">
        <label>strsafe.h</label>
      </node>
      <node id="498">
        <label>stdexcept</label>
      </node>
      <node id="486">
        <label>string</label>
      </node>
      <node id="487">
        <label>map</label>
      </node>
      <node id="488">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="489" relation="include">
        </childnode>
        <childnode refid="490" relation="include">
        </childnode>
        <childnode refid="491" relation="include">
        </childnode>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="492" relation="include">
        </childnode>
        <childnode refid="493" relation="include">
        </childnode>
        <childnode refid="497" relation="include">
        </childnode>
      </node>
      <node id="482">
        <label>CanLibLoaderWin.h</label>
        <link refid="CanLibLoaderWin_8h"/>
        <childnode refid="483" relation="include">
        </childnode>
        <childnode refid="484" relation="include">
        </childnode>
        <childnode refid="485" relation="include">
        </childnode>
      </node>
      <node id="492">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="489" relation="include">
        </childnode>
      </node>
      <node id="499">
        <label>sstream</label>
      </node>
      <node id="489">
        <label>sys/time.h</label>
      </node>
      <node id="490">
        <label>boost/bind.hpp</label>
      </node>
      <node id="496">
        <label>chrono</label>
      </node>
      <node id="485">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="486" relation="include">
        </childnode>
        <childnode refid="487" relation="include">
        </childnode>
        <childnode refid="488" relation="include">
        </childnode>
        <childnode refid="495" relation="include">
        </childnode>
      </node>
      <node id="495">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceCanModule">CanModule</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanLibLoaderWin_8h" kindref="compound">CanLibLoaderWin.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogIt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CanModule</highlight></codeline>
<codeline lineno="30"><highlight class="normal">{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespaceCanModule_1adcce5b3c80f29fba526b9c976746b146" kindref="member">__declspec</ref>(dllimport)<sp/>CCanAccess<sp/>*f_CCanAccess();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classCanModule_1_1CanLibLoaderWin_1ab8df128060b2e76465da474e4fdc8ad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanLibLoaderWin" kindref="compound">CanLibLoaderWin</ref>::ErrorExit(LPTSTR<sp/>lpszFunction)</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPVOID<sp/>lpMsgBuf;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LPVOID<sp/>lpDisplayBuf;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref><sp/>dw<sp/>=<sp/>GetLastError();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FormatMessage(</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_ALLOCATE_BUFFER<sp/>|</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_FROM_SYSTEM<sp/>|</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FORMAT_MESSAGE_IGNORE_INSERTS,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dw,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAKELANGID(LANG_NEUTRAL,<sp/>SUBLANG_DEFAULT),</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(LPTSTR)<sp/>&amp;lpMsgBuf,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>error<sp/>message<sp/>and<sp/>exit<sp/>the<sp/>process</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpDisplayBuf<sp/>=<sp/>(LPVOID)LocalAlloc(LMEM_ZEROINIT,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lstrlen((LPCTSTR)lpMsgBuf)<sp/>+<sp/>lstrlen((LPCTSTR)lpszFunction)<sp/>+<sp/>40)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TCHAR));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringCchPrintf((LPTSTR)lpDisplayBuf,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalSize(lpDisplayBuf)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(TCHAR),</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TEXT(</highlight><highlight class="stringliteral">&quot;%s<sp/>failed<sp/>with<sp/>error<sp/>%d:<sp/>%s&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lpszFunction,<sp/>dw,<sp/>lpMsgBuf);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MessageBox(NULL,<sp/>(LPCTSTR)lpDisplayBuf,<sp/>TEXT(</highlight><highlight class="stringliteral">&quot;Error&quot;</highlight><highlight class="normal">),<sp/>MB_OK);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalFree(lpMsgBuf);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LocalFree(lpDisplayBuf);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ExitProcess(dw);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="classCanModule_1_1CanLibLoaderWin_1a52236485330327832d4a282ea370df54" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a52236485330327832d4a282ea370df54" kindref="member">CanLibLoaderWin::CanLibLoaderWin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref>(libName),<sp/>m_pDynamicLibrary(0)</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::TRC,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;inherited<sp/>logItComponentHandle=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a8206b2ad7d352ecb8e119b55d2069bc0" kindref="member">dynamicallyLoadLib</ref>(libName);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classCanModule_1_1CanLibLoaderWin_1a39da78f1fde4fef2b6b17107e6767962" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a39da78f1fde4fef2b6b17107e6767962" kindref="member">CanLibLoaderWin::~CanLibLoaderWin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FreeLibrary(<ref refid="classCanModule_1_1CanLibLoaderWin_1a76d6eda73211a94f68dca4cb637394e8" kindref="member">m_pDynamicLibrary</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88" refid="classCanModule_1_1CanLibLoaderWin_1a8206b2ad7d352ecb8e119b55d2069bc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a8206b2ad7d352ecb8e119b55d2069bc0" kindref="member">CanLibLoaderWin::dynamicallyLoadLib</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>libName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can.dll&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//LOG(Log::DBG)<sp/>&lt;&lt;<sp/>&quot;Proceeding<sp/>to<sp/>load<sp/>library<sp/>&quot;<sp/>&lt;&lt;<sp/>ss.str();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//m_pDynamicLibrary<sp/>=<sp/>::LoadLibrary(ss.str().c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Proceeding<sp/>to<sp/>ExA<sp/>load<sp/>library<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ss.str();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a76d6eda73211a94f68dca4cb637394e8" kindref="member">m_pDynamicLibrary</ref><sp/>=<sp/>::LoadLibraryExA(ss.str().c_str(),<sp/>NULL,<sp/>0x00000010<sp/></highlight><highlight class="comment">/*<sp/>LOAD_IGNORE_CODE_AUTHZ_LEVEL<sp/>*/</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>check<sp/>for<sp/>errors<sp/>while<sp/>loading<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1a76d6eda73211a94f68dca4cb637394e8" kindref="member">m_pDynamicLibrary</ref><sp/>!=<sp/>NULL<sp/>)<sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>loaded<sp/>the<sp/>dynamic<sp/>library:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ss.str()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>msg<sp/>=<sp/>string(__FUNCTION__)<sp/>+<sp/>string(</highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>load<sp/>the<sp/>dynamic<sp/>library<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/>ss.str();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>ss.str()<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;ancan.dll&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING:<sp/>anagate<sp/>vendor<sp/>libs<sp/>do<sp/>not<sp/>install<sp/>on<sp/>your<sp/>system,<sp/>they<sp/>are<sp/>just<sp/>copied.<sp/>Make<sp/>sure<sp/>the<sp/>hidden<sp/>dependend<sp/>libs<sp/>(i.e.<sp/>AnaGateCan64.dll)<sp/>are<sp/>in<sp/>your<sp/>lib<sp/>search<sp/>path!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>WARNING:<sp/>easiest<sp/>solution:<sp/>copy<sp/>them<sp/>into<sp/>the<sp/>same<sp/>directory<sp/>as<sp/>the<sp/>CANX-tester<sp/>binary&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1ab8df128060b2e76465da474e4fdc8ad5" kindref="member">ErrorExit</ref>(TEXT(<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>load<sp/>the<sp/>dynamic<sp/>library<sp/>&quot;</highlight><highlight class="normal"><sp/>));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/>msg.c_str()<sp/>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classCanModule_1_1CanLibLoaderWin_1adcc42606c727f4ca010ad08719d88a18" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CanModule::CCanAccess</ref>*<sp/><ref refid="classCanModule_1_1CanLibLoaderWin_1adcc42606c727f4ca010ad08719d88a18" kindref="member">CanLibLoaderWin::createCanAccess</ref>()</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::TRC,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>Accessing<sp/>method<sp/>get<sp/>getCanBusAccess&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f_CCanAccess<sp/>*canAccess<sp/>=<sp/>(f_CCanAccess<sp/>*)GetProcAddress(<ref refid="classCanModule_1_1CanLibLoaderWin_1a76d6eda73211a94f68dca4cb637394e8" kindref="member">m_pDynamicLibrary</ref>,<sp/></highlight><highlight class="stringliteral">&quot;getCanBusAccess&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>__FILE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>__LINE__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>CanAccess=<sp/>0x&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>canAccess<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>for<sp/>errors<sp/>again.<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error<sp/>the<sp/>library<sp/>is<sp/>released<sp/>from<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!canAccess)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(__FUNCTION__)<sp/>+<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;:<sp/>Error:<sp/>could<sp/>not<sp/>locate<sp/>the<sp/>function&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>call<sp/>the<sp/>function<sp/>getHalAccess<sp/>we<sp/>got<sp/>from<sp/>the<sp/>library.<sp/>This<sp/>will<sp/>give<sp/>us<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>object,<sp/>wich<sp/>we<sp/>store.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::TRC,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>getCanBusAccess:<sp/>got<sp/>an<sp/>object<sp/>ptr<sp/>from<sp/>library,<sp/>OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref>*)(canAccess());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CanLibLoader/src/CanLibLoaderWin.cpp"/>
  </compounddef>
</doxygen>
