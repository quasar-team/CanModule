<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="CanLibLoaderLin_8cpp" kind="file">
    <compoundname>CanLibLoaderLin.cpp</compoundname>
    <includes refid="CanLibLoaderLin_8h" local="yes">CanLibLoaderLin.h</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">sstream</includes>
    <includes local="no">boost/filesystem.hpp</includes>
    <includes local="no">LogIt.h</includes>
    <includes local="yes">dlfcn.h</includes>
    <incdepgraph>
      <node id="472">
        <label>stdatomic.h</label>
      </node>
      <node id="475">
        <label>LogIt.h</label>
      </node>
      <node id="469">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="471">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="472" relation="include">
        </childnode>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
        <childnode refid="474" relation="include">
        </childnode>
      </node>
      <node id="476">
        <label>stdexcept</label>
      </node>
      <node id="462">
        <label>CanLibLoaderLin.h</label>
        <link refid="CanLibLoaderLin_8h"/>
        <childnode refid="463" relation="include">
        </childnode>
      </node>
      <node id="464">
        <label>string</label>
      </node>
      <node id="465">
        <label>map</label>
      </node>
      <node id="461">
        <label>CanLibLoader/src/CanLibLoaderLin.cpp</label>
        <link refid="CanLibLoaderLin.cpp"/>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="476" relation="include">
        </childnode>
        <childnode refid="477" relation="include">
        </childnode>
        <childnode refid="478" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
        <childnode refid="479" relation="include">
        </childnode>
      </node>
      <node id="463">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="465" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="473" relation="include">
        </childnode>
      </node>
      <node id="466">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="467" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="469" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
        <childnode refid="471" relation="include">
        </childnode>
        <childnode refid="475" relation="include">
        </childnode>
      </node>
      <node id="470">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="478">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="477">
        <label>sstream</label>
      </node>
      <node id="467">
        <label>sys/time.h</label>
      </node>
      <node id="468">
        <label>boost/bind.hpp</label>
      </node>
      <node id="474">
        <label>chrono</label>
      </node>
      <node id="473">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="479">
        <label>dlfcn.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceCanModule">CanModule</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanLibLoaderLin_8h" kindref="compound">CanLibLoaderLin.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/filesystem.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;LogIt.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;dlfcn.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//typedef<sp/>void*<sp/>(*f_CCanAccess)();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CanModule</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="namespaceCanModule_1aca5babab77e506364d8fb87f20767c3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref>*<sp/><ref refid="namespaceCanModule_1aca5babab77e506364d8fb87f20767c3f" kindref="member">f_canAccess</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classCanModule_1_1CanLibLoaderLin_1a2704a1d43e18e97223848c28dc5dc6ce" refkind="member"><highlight class="normal"><ref refid="classCanModule_1_1CanLibLoaderLin_1a2704a1d43e18e97223848c28dc5dc6ce" kindref="member">CanLibLoaderLin::CanLibLoaderLin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">:<sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref>(libName),<sp/>p_dynamicLibrary(0)</highlight></codeline>
<codeline lineno="40"><highlight class="normal">{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(Log::TRC,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;inherited<sp/>logItComponentHandle=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderLin_1aaef852fe6e43d093f58529fab0b2e841" kindref="member">dynamicallyLoadLib</ref>(libName);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderLin_1a7d222a82ab3f005ebed4927b299fce64" kindref="member">createCanAccess</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45" refid="classCanModule_1_1CanLibLoaderLin_1a91636138f96d42a3a835c2a38bae3ec6" refkind="member"><highlight class="normal"><ref refid="classCanModule_1_1CanLibLoaderLin_1a91636138f96d42a3a835c2a38bae3ec6" kindref="member">CanLibLoaderLin::~CanLibLoaderLin</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>dlclose(<ref refid="classCanModule_1_1CanLibLoaderLin_1a590b2db4fcfa870e005c04b28de4fad6" kindref="member">p_dynamicLibrary</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classCanModule_1_1CanLibLoaderLin_1aaef852fe6e43d093f58529fab0b2e841" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanLibLoaderLin_1aaef852fe6e43d093f58529fab0b2e841" kindref="member">CanLibLoaderLin::dynamicallyLoadLib</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>library<sp/>is<sp/>loaded<sp/>through<sp/>dlopen<sp/>(Linux<sp/>API)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostringstream<sp/>ss;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;lib&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>libName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;can.so&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Proceeding<sp/>to<sp/>load<sp/>library<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ss.str();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderLin_1a590b2db4fcfa870e005c04b28de4fad6" kindref="member">p_dynamicLibrary</ref><sp/>=<sp/>dlopen(ss.str().c_str(),<sp/>RTLD_NOW);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//We<sp/>check<sp/>for<sp/>errors<sp/>while<sp/>loading<sp/>the<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classCanModule_1_1CanLibLoaderLin_1a590b2db4fcfa870e005c04b28de4fad6" kindref="member">p_dynamicLibrary</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*err<sp/>=<sp/>dlerror();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ostringstream<sp/>msg;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>load<sp/>dynamic<sp/>library<sp/>[&quot;</highlight><highlight class="normal">&lt;&lt;ss.str()&lt;&lt;</highlight><highlight class="stringliteral">&quot;],<sp/>current<sp/>working<sp/>directory<sp/>[&quot;</highlight><highlight class="normal">&lt;&lt;boost::filesystem::current_path()&lt;&lt;</highlight><highlight class="stringliteral">&quot;]<sp/>error:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;err;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/>msg.str();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(msg.str());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classCanModule_1_1CanLibLoaderLin_1a7d222a82ab3f005ebed4927b299fce64" refkind="member"><highlight class="normal"><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref>*<sp/><sp/><ref refid="classCanModule_1_1CanLibLoaderLin_1a7d222a82ab3f005ebed4927b299fce64" kindref="member">CanLibLoaderLin::createCanAccess</ref>()</highlight></codeline>
<codeline lineno="76"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespaceCanModule_1aca5babab77e506364d8fb87f20767c3f" kindref="member">f_canAccess</ref><sp/>*canAccess;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>canAccess<sp/>=<sp/>(<ref refid="namespaceCanModule_1aca5babab77e506364d8fb87f20767c3f" kindref="member">f_canAccess</ref>*)dlsym(<ref refid="classCanModule_1_1CanLibLoaderLin_1a590b2db4fcfa870e005c04b28de4fad6" kindref="member">p_dynamicLibrary</ref>,</highlight><highlight class="stringliteral">&quot;getCanBusAccess&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>check<sp/>for<sp/>errors<sp/>again.<sp/>If<sp/>there<sp/>is<sp/>an<sp/>error<sp/>the<sp/>library<sp/>is<sp/>released<sp/>from<sp/>memory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*err<sp/>=<sp/>dlerror();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>locate<sp/>the<sp/>function,<sp/>error:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>locate<sp/>the<sp/>function&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//TODO:<sp/>add<sp/>library<sp/>name<sp/>to<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!canAccess)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlclose(<ref refid="classCanModule_1_1CanLibLoaderLin_1a590b2db4fcfa870e005c04b28de4fad6" kindref="member">p_dynamicLibrary</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/><ref refid="classCanModule_1_1CanLibLoader_1af891a85f28376052c3f4b22d97eb3ac2" kindref="member">lh</ref>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>locate<sp/>the<sp/>function,<sp/>error:<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>err<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Error:<sp/>could<sp/>not<sp/>locate<sp/>the<sp/>function&quot;</highlight><highlight class="normal">);</highlight><highlight class="comment">//TODO:<sp/>add<sp/>library<sp/>name<sp/>to<sp/>message<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>call<sp/>the<sp/>function<sp/>getHalAccess<sp/>we<sp/>got<sp/>from<sp/>the<sp/>library.<sp/>This<sp/>will<sp/>give<sp/>us<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>object,<sp/>which<sp/>we<sp/>store.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>canAccess();</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mludwig/projects/CanModule/CanModule-sphinx2/CanLibLoader/src/CanLibLoaderLin.cpp"/>
  </compounddef>
</doxygen>
