<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classSTCanScan" kind="class" language="C++" prot="public">
    <compoundname>STCanScan</compoundname>
    <basecompoundref refid="classCanModule_1_1CCanAccess" prot="public" virt="non-virtual">CanModule::CCanAccess</basecompoundref>
    <includes refid="STCanScan_8h" local="no">STCanScan.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int STCanScan::m_moduleNumber</definition>
        <argsstring></argsstring>
        <name>m_moduleNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="76" column="5" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="76" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
        <referencedby refid="classSTCanScan_1a50337fe307a73461cce620c6cb6b8fe9" compoundref="STCanScan_8cpp" startline="398" endline="418">reconnectAllPorts</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int STCanScan::m_channelNumber</definition>
        <argsstring></argsstring>
        <name>m_channelNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="77" column="5" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="77" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
        <referencedby refid="classSTCanScan_1a2c1de002fa7ace90ef95af00f824c8e4" compoundref="STCanScan_8cpp" startline="513" endline="523">sendRemoteRequest</referencedby>
        <referencedby refid="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" compoundref="STCanScan_8cpp" startline="169" endline="175">~STCanScan</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1a8d6dd7c1cbf4a97607909086da6361e1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int STCanScan::m_canHandleNumber</definition>
        <argsstring></argsstring>
        <name>m_canHandleNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="78" column="5" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="78" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" prot="private" static="no" mutable="no">
        <type>tUcanHandle</type>
        <definition>tUcanHandle STCanScan::m_UcanHandle</definition>
        <argsstring></argsstring>
        <name>m_UcanHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="79" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="79" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1a27eabd471d3bb8154dfadb677c66e1d5" compoundref="STCanScan_8cpp" startline="372" endline="378">getPortStatus</referencedby>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
        <referencedby refid="classSTCanScan_1a50337fe307a73461cce620c6cb6b8fe9" compoundref="STCanScan_8cpp" startline="398" endline="418">reconnectAllPorts</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
        <referencedby refid="classSTCanScan_1a2c1de002fa7ace90ef95af00f824c8e4" compoundref="STCanScan_8cpp" startline="513" endline="523">sendRemoteRequest</referencedby>
        <referencedby refid="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" compoundref="STCanScan_8cpp" startline="169" endline="175">~STCanScan</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" prot="private" static="no" mutable="no">
        <type><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanStatistics</ref></type>
        <definition>CanStatistics STCanScan::m_statistics</definition>
        <argsstring></argsstring>
        <name>m_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="80" column="15" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="80" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1a4810249805b660c4e914247acbdf45d2" compoundref="STCanScan_8cpp" startline="686" endline="691">getStatistics</referencedby>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
        <referencedby refid="classSTCanScan_1a75fcb8ff51d82d362edb1dd31125fb10" compoundref="STCanScan_8cpp" startline="61" endline="74">STCanScan</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int STCanScan::m_baudRate</definition>
        <argsstring></argsstring>
        <name>m_baudRate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="81" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="81" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
        <referencedby refid="classSTCanScan_1a4810249805b660c4e914247acbdf45d2" compoundref="STCanScan_8cpp" startline="686" endline="691">getStatistics</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1acf5dfe6c253afa4e08e883f8177e2eb3" prot="private" static="no" mutable="no">
        <type>Log::LogComponentHandle</type>
        <definition>Log::LogComponentHandle STCanScan::m_logItHandleSt</definition>
        <argsstring></argsstring>
        <name>m_logItHandleSt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="82" column="25" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="82" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" compoundref="STCanScan_8cpp" startline="211" endline="239">createBus</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1aa1c2f27f78da63fc7d1f542f818b9624" prot="private" static="no" mutable="no">
        <type><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref></type>
        <definition>DWORD STCanScan::m_busStatus</definition>
        <argsstring></argsstring>
        <name>m_busStatus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="85" column="6" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="85" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" compoundref="STCanScan_8cpp" startline="380" endline="393">sendErrorCode</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1abd418113d56ef882bb12cd7473d031e1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool STCanScan::m_CanScanThreadShutdownFlag</definition>
        <argsstring></argsstring>
        <name>m_CanScanThreadShutdownFlag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="86" column="6" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="86" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" compoundref="STCanScan_8cpp" startline="169" endline="175">~STCanScan</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1a2a57272e12f97f245e6f204347782bc0" prot="private" static="no" mutable="no">
        <type>HANDLE</type>
        <definition>HANDLE STCanScan::m_hCanScanThread</definition>
        <argsstring></argsstring>
        <name>m_hCanScanThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="88" column="11" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="88" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" compoundref="STCanScan_8cpp" startline="211" endline="239">createBus</referencedby>
        <referencedby refid="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" compoundref="STCanScan_8cpp" startline="169" endline="175">~STCanScan</referencedby>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1a8ae65fcef31d4bb84aa5bb8978973f86" prot="private" static="no" mutable="no">
        <type><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref></type>
        <definition>DWORD STCanScan::m_idCanScanThread</definition>
        <argsstring></argsstring>
        <name>m_idCanScanThread</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="90" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="90" bodyend="-1"/>
        <referencedby refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" compoundref="STCanScan_8cpp" startline="211" endline="239">createBus</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classSTCanScan_1ac3f6c36fec9666c086da47f241f75dba" prot="private" static="yes" mutable="no">
        <type>tUcanHandle</type>
        <definition>tUcanHandle STCanScan::s_canHandleArray</definition>
        <argsstring>[256]</argsstring>
        <name>s_canHandleArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="108" column="20" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classSTCanScan_1a310439aeb8688c29fb3fe8faa4a9e198" prot="private" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool STCanScan::s_isCanHandleInUseArray</definition>
        <argsstring>[256]</argsstring>
        <name>s_isCanHandleInUseArray</name>
        <briefdescription>
<para>The macro below is applicable only to this translation unit. </para>
        </briefdescription>
        <detaileddescription>
<para>© Copyright CERN, 2015. All rights not expressly granted are reserved.</para>
<para>STCanScap.cpp</para>
<para>Created on: Jul 21, 2011 Based on work by vfilimon Rework and logging done by Piotr Nikiel <ulink url="mailto:piotr@nikiel.info">piotr@nikiel.info</ulink> mludwig at cern dot ch</para>
<para>This file is part of Quasar.</para>
<para>Quasar is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public Licence as published by the Free Software Foundation, either version 3 of the Licence.</para>
<para>Quasar is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public Licence for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with Quasar. If not, see <ulink url="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</ulink>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="109" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classSTCanScan_1a75fcb8ff51d82d362edb1dd31125fb10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>STCanScan::STCanScan</definition>
        <argsstring>()</argsstring>
        <name>STCanScan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="42" column="1" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="61" bodyend="74"/>
        <references refid="classCanModule_1_1CanStatistics_1a85e6c87ce5285884a0272088178bb8f6" compoundref="CanStatistics_8cpp" startline="41" endline="48">CanModule::CanStatistics::beginNewRun</references>
        <references refid="classCanModule_1_1CCanAccess_1a6f97774773e3e4457f38a7b612d991f0" compoundref="CCanAccess_8h" startline="471">CanModule::CCanAccess::m_failedSendCountdown</references>
        <references refid="classCanModule_1_1CCanAccess_1a2dbf5862f3818d94bc78dd9ccb5c73d0" compoundref="CCanAccess_8h" startline="472">CanModule::CCanAccess::m_maxFailedSendCount</references>
        <references refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" compoundref="STCanScan_8h" startline="80">m_statistics</references>
        <references refid="classCanModule_1_1CanStatistics_1af3f15dedf80e67f1309946632d87198d" compoundref="CanStatistics_8h" startline="101" endline="101">CanModule::CanStatistics::setTimeSinceOpened</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a335aaec2300f2b9c31fd0f268014f24d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>STCanScan::STCanScan</definition>
        <argsstring>(STCanScan const &amp;other)=delete</argsstring>
        <name>STCanScan</name>
        <param>
          <type><ref refid="classSTCanScan" kindref="compound">STCanScan</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a7c2d148e988e8b7e9df6b4ab0ed2dda1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classSTCanScan" kindref="compound">STCanScan</ref> &amp;</type>
        <definition>STCanScan&amp; STCanScan::operator=</definition>
        <argsstring>(STCanScan const &amp;other)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classSTCanScan" kindref="compound">STCanScan</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="44" column="11"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>STCanScan::~STCanScan</definition>
        <argsstring>()</argsstring>
        <name>~STCanScan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="45" column="9" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="169" bodyend="175"/>
        <references refid="classSTCanScan_1abd418113d56ef882bb12cd7473d031e1" compoundref="STCanScan_8h" startline="86">m_CanScanThreadShutdownFlag</references>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="classSTCanScan_1a2a57272e12f97f245e6f204347782bc0" compoundref="STCanScan_8h" startline="88">m_hCanScanThread</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int STCanScan::createBus</definition>
        <argsstring>(const std::string name, const std::string parameters)</argsstring>
        <name>createBus</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a2ef435a5fb9896dbb70bc0e149fa0549">createBus</reimplements>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method that initialises a CAN bus channel for systec@windows. All following methods called on the same object will be using this initialized channel.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>= 2 parameters separated by &quot;:&quot; like &quot;n0:n1&quot;<itemizedlist>
<listitem><para>n0 = &quot;st&quot; for systec@windows</para>
</listitem><listitem><para>n1 = CAN port number on the module, can be prefixed with &quot;can&quot;</para>
</listitem><listitem><para>ex.: &quot;st:can1&quot; speaks to port 1 on systec module at the ip</para>
</listitem><listitem><para>ex.: &quot;st:1&quot; works as well</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>one parameter: &quot;p0&quot;, positive integers<itemizedlist>
<listitem><para>&quot;Unspecified&quot; (or empty): using defaults = &quot;125000&quot; // params missing</para>
</listitem><listitem><para>p0: bitrate: 50000, 100000, 125000, 250000, 500000, 1000000 bit/s i.e. &quot;250000&quot;</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>was the initialisation process successful?</para>
</simplesect>
===note from Piotr=== in the Windows implementation of Systec (hardware component: st): to define the interface naming as canX, where X is a non-negative number note: the SysTec driver for windows expects addressing in terms of module number and channel (e.g. 0:0 is can0, 1:0 is can2, 1:1 is can3, etc) so can0 should open a SysTec interface 0:0 matching &quot;can0&quot; on the box, can1 should open a SysTec interface 0:1 matching &quot;can1&quot; on the box, etc.</para>
<para>returns: 0 = OK, bus created -1 = not ok, board init failed -2 = not ok, thread creation failed</para>
<para>no implemented: 1=OK, bus creation skipped since it exists already </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="47" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="211" bodyend="239"/>
        <references refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</references>
        <references refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</references>
        <references refid="namespaceCanModule_1a78730a18f59663871883885f3914a2aa" compoundref="CCanAccess_8h" startline="61">CanModule::LogItComponentName</references>
        <references refid="classSTCanScan_1a2a57272e12f97f245e6f204347782bc0" compoundref="STCanScan_8h" startline="88">m_hCanScanThread</references>
        <references refid="classSTCanScan_1a8ae65fcef31d4bb84aa5bb8978973f86" compoundref="STCanScan_8h" startline="90">m_idCanScanThread</references>
        <references refid="classSTCanScan_1acf5dfe6c253afa4e08e883f8177e2eb3" compoundref="STCanScan_8h" startline="82">m_logItHandleSt</references>
        <references refid="classCanModule_1_1CCanAccess_1a3a7a432d8d12f931c97ee0e91f35b1dd" compoundref="CCanAccess_8h" startline="464">CanModule::CCanAccess::m_sBusName</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool STCanScan::sendMessage</definition>
        <argsstring>(short cobID, unsigned char len, unsigned char *message, bool rtr=false)</argsstring>
        <name>sendMessage</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1aee42ab7fb9e50c02a1812202f7863d8c">sendMessage</reimplements>
        <param>
          <type>short</type>
          <declname>cobID</declname>
        </param>
        <param>
          <type>unsigned char</type>
          <declname>len</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rtr</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method that sends a message trough the can bus channel. If the method createBUS was not called before this, sendMessage will fail, as there is no can bus channel to send a message through.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cobID</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier that will be used for the message. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the message. If the message is bigger than 8 characters, it will be split into separate 8 characters messages. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>Message to be sent trough the can bus. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rtr</parametername>
</parameternamelist>
<parameterdescription>
<para>is the message a remote transmission request? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Was the sending process successful? </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="48" column="18" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="431" bodyend="511"/>
        <references refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5a319ee2c9d887d55f6bc1941518a5ae76">CanModule::allBusesOnBridge</references>
        <references refid="namespaceCanModule_1a901b4695397276d8bbc0f1ebd0204a8e" compoundref="CanModuleUtils_8cpp" startline="96" endline="108">CanModule::canMessage2ToString</references>
        <references refid="classSTCanScan_1af6cf11abff5d1b39b35ceff9ae857270" compoundref="STCanScan_8cpp" startline="78" endline="92">createInitializationParameters</references>
        <references refid="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" compoundref="STCanScan_8h" startline="81">m_baudRate</references>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="classCanModule_1_1CCanAccess_1a6f97774773e3e4457f38a7b612d991f0" compoundref="CCanAccess_8h" startline="471">CanModule::CCanAccess::m_failedSendCountdown</references>
        <references refid="classCanModule_1_1CCanAccess_1a2dbf5862f3818d94bc78dd9ccb5c73d0" compoundref="CCanAccess_8h" startline="472">CanModule::CCanAccess::m_maxFailedSendCount</references>
        <references refid="classCanModule_1_1CCanAccess_1a6baf24c56eb715adf55a569d08b12c25" compoundref="CCanAccess_8h" startline="469">CanModule::CCanAccess::m_reconnectAction</references>
        <references refid="classCanModule_1_1CCanAccess_1abfd40edc34a777a5ff4503a6e8a239d6" compoundref="CCanAccess_8h" startline="468">CanModule::CCanAccess::m_reconnectCondition</references>
        <references refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" compoundref="STCanScan_8h" startline="80">m_statistics</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
        <references refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbbac7561db7a418dd39b2201dfe110ab4a4">CanModule::never</references>
        <references refid="classCanModule_1_1CanStatistics_1a0265b75e9e2e16737950b6b5c5662f35" compoundref="CanStatistics_8cpp" startline="69" endline="74">CanModule::CanStatistics::onTransmit</references>
        <references refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</references>
        <references refid="classCanModule_1_1CCanAccess_1aa12f64e9e31bd491f39fc3169b1e5025" compoundref="CCanAccess_8h" startline="449" endline="455">CanModule::CCanAccess::reconnectActionString</references>
        <references refid="classSTCanScan_1a50337fe307a73461cce620c6cb6b8fe9" compoundref="STCanScan_8cpp" startline="398" endline="418">reconnectAllPorts</references>
        <references refid="classCanModule_1_1CCanAccess_1a9da88ce122d5de04a0235a4682a13dc0" compoundref="CCanAccess_8h" startline="437" endline="444">CanModule::CCanAccess::reconnectConditionString</references>
        <references refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" compoundref="STCanScan_8cpp" startline="380" endline="393">sendErrorCode</references>
        <references refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbbae323a25a871808f9a0df9a72ce954585">CanModule::sendFail</references>
        <references refid="classCanModule_1_1CanStatistics_1afe8d43dfb65ee2675ceac1dc84f7eb1a" compoundref="CanStatistics_8h" startline="103" endline="103">CanModule::CanStatistics::setTimeSinceTransmitted</references>
        <references refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5a5f768fefafa6db21eee26885afb6163d">CanModule::singleBus</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a2c1de002fa7ace90ef95af00f824c8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool STCanScan::sendRemoteRequest</definition>
        <argsstring>(short cobID)</argsstring>
        <name>sendRemoteRequest</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1acfefbc9be2696b1388cf6df2bba00aa1">sendRemoteRequest</reimplements>
        <param>
          <type>short</type>
          <declname>cobID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Method that sends a remote request trough the can bus channel. If the method createBus was not called before this, sendMessage will fail, as there is no can bus channel to send the request trough. Similar to sendMessage, but it sends an special message reserved for requests. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cobID</parametername>
</parameternamelist>
<parameterdescription>
<para>Identifier that will be used for the request. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: Was the initialisation process successful? </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="56" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="513" bodyend="523"/>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <references refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" compoundref="STCanScan_8cpp" startline="380" endline="393">sendErrorCode</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a4810249805b660c4e914247acbdf45d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void STCanScan::getStatistics</definition>
        <argsstring>(CanStatistics &amp;result)</argsstring>
        <name>getStatistics</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1ad3182c83b4c5d7e6aef982c36e731507">getStatistics</reimplements>
        <param>
          <type><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanStatistics</ref> &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="58" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="686" bodyend="691"/>
        <references refid="classCanModule_1_1CanStatistics_1a85e6c87ce5285884a0272088178bb8f6" compoundref="CanStatistics_8cpp" startline="41" endline="48">CanModule::CanStatistics::beginNewRun</references>
        <references refid="classCanModule_1_1CanStatistics_1a8ec66bd11141579779f143362b70640e" compoundref="CanStatistics_8cpp" startline="49" endline="67">CanModule::CanStatistics::computeDerived</references>
        <references refid="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" compoundref="STCanScan_8h" startline="81">m_baudRate</references>
        <references refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" compoundref="STCanScan_8h" startline="80">m_statistics</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a27eabd471d3bb8154dfadb677c66e1d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t STCanScan::getPortStatus</definition>
        <argsstring>()</argsstring>
        <name>getPortStatus</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a33fe530d070cf35d096e967d543186a4">getPortStatus</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get CAN port and USB status, code it into an int &gt; 200 (for windows@systec). use the API directly table19 says for CAN status: 0x0: no error 0x1: tx overrun 0x2: rx overrun 0x4: error limit1 exceeded: warning limit 0x8: error limit2 exceeded: error passive 0x10: can controller is off 0x40: rx buffer overrun 0x80: tx buffer overrun 0x400: transmit timeout, message dropped</para>
<para>table20 says for USB status: 0x2000: module/usb got reset because of polling failure per second 0x4000: module/usb got reset because watchdog was not triggered </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="60" column="18" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="372" bodyend="378"/>
        <references refid="CCanAccess_8h_1af9d1d0a4353efec30879f97d7caebb76" compoundref="CCanAccess_8h" startline="88">CANMODULE_STATUS_BP_SYSTEC</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a91743fa3da0804c3bf55e40c8c8da9b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>virtual uint32_t STCanScan::getPortBitrate</definition>
        <argsstring>()</argsstring>
        <name>getPortBitrate</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1aa8cb67096349fefc6e03aeb33e45ef81">getPortBitrate</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the bitrate of that port [bits/sec] according to what <ref refid="namespaceCanModule" kindref="compound">CanModule</ref> buffers say. This is the setting used for setting up the hardware, after any default rules have been applied, but BEFORE any vendor specific encoding into obscure bitpatterns occurs. This happens at port opening and the bitrate can only be changed at that moment. So please call this method just after you have opened the port. But also since there is no hw interaction and it just returns a buffer, you may call it as often as you like. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="61" column="18" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1ab9c50de0ed0386a7826c6bbabafc4117" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Log::LogComponentHandle</type>
        <definition>Log::LogComponentHandle STCanScan::logItHandle</definition>
        <argsstring>()</argsstring>
        <name>logItHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="63" column="25" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a17bfbbb7ad6c03fc1ec9ef5f6fed0d3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void STCanScan::setReconnectBehavior</definition>
        <argsstring>(CanModule::ReconnectAutoCondition cond, CanModule::ReconnectAction action)</argsstring>
        <name>setReconnectBehavior</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1ae1088edaf5444ff42ee094ae46240cc5">setReconnectBehavior</reimplements>
        <param>
          <type><ref refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbb" kindref="member">CanModule::ReconnectAutoCondition</ref></type>
          <declname>cond</declname>
        </param>
        <param>
          <type><ref refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5" kindref="member">CanModule::ReconnectAction</ref></type>
          <declname>action</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>configuring the reconnection behavior: a condition triggers an action. The implementation is implementation-specific because not all vendor APIs permit the same behavior: not all combinations are available for all vendors/implementations. The implemented reconnection behavior is standardized nevertheless: &quot;you get what you see&quot;. Foe each CanBus you have to choose one condition and one action. Condition detection and action execution are then automatic inside <ref refid="namespaceCanModule" kindref="compound">CanModule</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbb" kindref="member">CanModule::ReconnectAutoCondition</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>cond<itemizedlist>
<listitem><para>sendFail (default): a reconnection is triggered automatically if a send on the canBus fails. The number of failed sends can be set (default is 10). The failed sending must be strictly consecutive, if there is a succeeded sending, the internal counting restarts.</para>
</listitem><listitem><para>timeoutOnReception: the last time of a successful reception on a given channel can be monitored. If the last reception is older than 120 sec a reset is triggered automatically. This last successful reception time is calculated each time a send is invoked. The timeout is specified in seconds, default is 120sec.</para>
</listitem><listitem><para>never: this condition is always false and therefore no automatic reconnection action will be triggered. You can still call the explicit method reconnect( &lt;action&gt; ) but it is up to the client (server) to decide when.</para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername><ref refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5" kindref="member">CanModule::ReconnectAction</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>action<itemizedlist>
<listitem><para>singleBus (default): a single connection (canbus, channel) is reset and reception handler is reconnected.</para>
</listitem><listitem><para>wholeBridge if available, the whole bridge is reset, affecting all physical channels on that bridge. Only available for anagate. If a bridge is shared between multiple tasks, all channels across tasks are reset, affecting all tasks connected to that bridge. Evidently, a given channel must only be used by at most one task. </para>
</listitem></itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="64" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1adca4386c1a008644c27f1d8e7c395272" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void STCanScan::setReconnectReceptionTimeout</definition>
        <argsstring>(unsigned int timeout)</argsstring>
        <name>setReconnectReceptionTimeout</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a3c902569c0712d165fc7e385e683dc95">setReconnectReceptionTimeout</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the timout interval for message reception, for the reconnection behaviour. Units is seconds, default is 120. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="68" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a2525cc89387ee92ce7e62be414d3c83e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void STCanScan::setReconnectFailedSendCount</definition>
        <argsstring>(unsigned int c)</argsstring>
        <name>setReconnectFailedSendCount</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a665620fe5924cf87db0589a353d3d148">setReconnectFailedSendCount</reimplements>
        <param>
          <type>unsigned int</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>set the counter for failed consecutive sending attempts, for reconnection. default is 10. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="69" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="69" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a01b70015904374f482647fbfb1806b08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbb" kindref="member">CanModule::ReconnectAutoCondition</ref></type>
        <definition>virtual CanModule::ReconnectAutoCondition STCanScan::getReconnectCondition</definition>
        <argsstring>()</argsstring>
        <name>getReconnectCondition</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a003566cbcdf4ce8195853bd8049a8800">getReconnectCondition</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>read back the r.condition </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="70" column="43" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="70" bodyend="70"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a471b6a8617a57b974cb71a2dc540d370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5" kindref="member">CanModule::ReconnectAction</ref></type>
        <definition>virtual CanModule::ReconnectAction STCanScan::getReconnectAction</definition>
        <argsstring>()</argsstring>
        <name>getReconnectAction</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1aaf2312ff9074ce7a4ec2e7d0a5b6fa16">getReconnectAction</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>read back the r.action </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="71" column="36" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="71" bodyend="71"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1ae88b966c3c318eca384385c5a85cf2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void STCanScan::stopBus</definition>
        <argsstring>()</argsstring>
        <name>stopBus</name>
        <reimplements refid="classCanModule_1_1CCanAccess_1a3fabe88b8e21638afd5d9886bb9c4aeb">stopBus</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>force implementation </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="72" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool STCanScan::sendErrorCode</definition>
        <argsstring>(long)</argsstring>
        <name>sendErrorCode</name>
        <param>
          <type>long</type>
          <defname>status</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="83" column="6" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="380" bodyend="393"/>
        <references refid="classCanModule_1_1CCanAccess_1a33fbd693f04b4f4e21cee20856c44866" compoundref="CCanAccess_8h" startline="322">CanModule::CCanAccess::canMessageError</references>
        <references refid="namespaceCanModule_1a3ec3082d7d11a9c1641023cb3f53cbe5" compoundref="CanModuleUtils_8cpp" startline="49" endline="57">CanModule::convertTimepointToTimeval</references>
        <references refid="namespaceCanModule_1a6d0711aac0a75de5d2bf6142997a814d" compoundref="CanModuleUtils_8cpp" startline="79" endline="79">CanModule::currentTimeTimeval</references>
        <references refid="classSTCanScan_1a54da665706336c8fab2f1c32b64056c5" compoundref="STCanScan_8h" startline="101" endline="101">errorCodeToString</references>
        <references refid="classSTCanScan_1aa1c2f27f78da63fc7d1f542f818b9624" compoundref="STCanScan_8h" startline="85">m_busStatus</references>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
        <referencedby refid="classSTCanScan_1a2c1de002fa7ace90ef95af00f824c8e4" compoundref="STCanScan_8cpp" startline="513" endline="523">sendRemoteRequest</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int STCanScan::configureCanBoard</definition>
        <argsstring>(const std::string name, const std::string parameters)</argsstring>
        <name>configureCanBoard</name>
        <param>
          <type>const std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>configures systec @ windows board only G1/G2 boards </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="95" column="5" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="245" bodyend="286"/>
        <references refid="classSTCanScan_1af6cf11abff5d1b39b35ceff9ae857270" compoundref="STCanScan_8cpp" startline="78" endline="92">createInitializationParameters</references>
        <references refid="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" compoundref="STCanScan_8h" startline="81">m_baudRate</references>
        <references refid="classSTCanScan_1a8d6dd7c1cbf4a97607909086da6361e1" compoundref="STCanScan_8h" startline="78">m_canHandleNumber</references>
        <references refid="classCanModule_1_1CCanAccess_1a484a4f9dc352fe31b4baff0365095705" compoundref="CCanAccess_8h" startline="465">CanModule::CCanAccess::m_CanParameters</references>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="structCanModule_1_1CanParameters_1ac4e03899b26e33a3867ee1f0bce674b5" compoundref="CCanAccess_8h" startline="136">CanModule::CanParameters::m_iNumberOfDetectedParameters</references>
        <references refid="structCanModule_1_1CanParameters_1a53ce17e16c2a818ffbc05904d9e56e11" compoundref="CCanAccess_8h" startline="128">CanModule::CanParameters::m_lBaudRate</references>
        <references refid="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" compoundref="STCanScan_8h" startline="76">m_moduleNumber</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
        <references refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</references>
        <references refid="classCanModule_1_1CCanAccess_1ac78e7df675c7e59f04ecc642406fecbe" compoundref="CCanAccess_8cpp" startline="23" endline="98">CanModule::CCanAccess::parseNameAndParameters</references>
        <references refid="classSTCanScan_1aa57c48594c8a70a0331f07fb4ad208fd" compoundref="STCanScan_8cpp" startline="293" endline="313">vendorBaudRate2UserBaudRate</references>
        <referencedby refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" compoundref="STCanScan_8cpp" startline="211" endline="239">createBus</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int STCanScan::openCanPort</definition>
        <argsstring>(tUcanInitCanParam initializationParameters)</argsstring>
        <name>openCanPort</name>
        <param>
          <type>tUcanInitCanParam</type>
          <declname>initializationParameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Obtains a Systec canport and opens it. The name of the port and parameters should have been specified by preceding call to configureCanboard()</para>
<para><simplesect kind="return"><para>less than zero in case of error, otherwise success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="96" column="5" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="321" bodyend="352"/>
        <references refid="classSTCanScan_1a29b4c3c8f29e45f808fbb7528e4593aa" compoundref="STCanScan_8h" startline="106" endline="106">getCanHandle</references>
        <references refid="classSTCanScan_1a2f2a9aaa3ce2c653a4e1152eb8497493" compoundref="STCanScan_8h" startline="104" endline="104">isCanHandleInUse</references>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" compoundref="STCanScan_8h" startline="76">m_moduleNumber</references>
        <references refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" compoundref="STCanScan_8h" startline="80">m_statistics</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
        <references refid="classSTCanScan_1a50f89ce5fc0b2961937dc8a4b86081f8" compoundref="STCanScan_8h" startline="105" endline="105">setCanHandle</references>
        <references refid="classSTCanScan_1ae29a23d161c115f173cbdb3a807c895e" compoundref="STCanScan_8h" startline="103" endline="103">setCanHandleInUse</references>
        <references refid="classCanModule_1_1CanStatistics_1af3f15dedf80e67f1309946632d87198d" compoundref="CanStatistics_8h" startline="101" endline="101">CanModule::CanStatistics::setTimeSinceOpened</references>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a54da665706336c8fab2f1c32b64056c5" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* STCanScan::errorCodeToString</definition>
        <argsstring>(long error)</argsstring>
        <name>errorCodeToString</name>
        <param>
          <type>long</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="101" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="101" bodyend="101"/>
        <referencedby refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" compoundref="STCanScan_8cpp" startline="380" endline="393">sendErrorCode</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1aa57c48594c8a70a0331f07fb4ad208fd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int STCanScan::vendorBaudRate2UserBaudRate</definition>
        <argsstring>(unsigned int vb)</argsstring>
        <name>vendorBaudRate2UserBaudRate</name>
        <param>
          <type>unsigned int</type>
          <declname>vb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unfortunately it is necessary to convert the vendor baudrate back to the human readable user baudrate for statistics. we use presently ONLY G1/G2 boards (see usbcan.h) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="112" column="14" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="293" bodyend="313"/>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a794110572725db6b7c153104ee1330b3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string STCanScan::STcanGetErrorText</definition>
        <argsstring>(long errCode)</argsstring>
        <name>STcanGetErrorText</name>
        <param>
          <type>long</type>
          <declname>errCode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>error text specific to STcan according to table24 I am just copying the whole descriptions from the doc, verbatim, wtf. you get some shakespeare from it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="113" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="530" bodyend="685"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classSTCanScan_1aab42375da764eb0d50dee318cd790646" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref> <ref refid="STCanScan_8cpp_1a9aa60e1ead64be77ad551e745cbfd4d3" kindref="member">WINAPI</ref></type>
        <definition>DWORD WINAPI STCanScan::CanScanControlThread</definition>
        <argsstring>(LPVOID pCanScan)</argsstring>
        <name>CanScanControlThread</name>
        <param>
          <type>LPVOID</type>
          <declname>pCanScan</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>thread to supervise port activity </para>
        </detaileddescription>
        <inbodydescription>
<para>lets check the timeoutOnReception reconnect condition. If it is true, all we can do is to close/open the port again since the underlying hardware is hidden by socketcan abstraction. Like his we do not have to pollute the &quot;sendMessage&quot; like for anagate, and that is cleaner.</para>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="92" column="21" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="98" bodyend="167"/>
        <references refid="structCanMsgStruct_1a2e47a33e7bba46b05a8fff29433f047b" compoundref="CanMessage_8h" startline="29">CanMsgStruct::c_data</references>
        <references refid="structCanMsgStruct_1a3e5add8ae9cdadfcf3f2255d375ec9b3" compoundref="CanMessage_8h" startline="27">CanMsgStruct::c_dlc</references>
        <references refid="structCanMsgStruct_1acf3abc93beb936e5f9431ef6ec4568f3" compoundref="CanMessage_8h" startline="25">CanMsgStruct::c_ff</references>
        <references refid="structCanMsgStruct_1a619515aef041e64b78e7e8c33989ddd0" compoundref="CanMessage_8h" startline="23">CanMsgStruct::c_id</references>
        <references refid="structCanMsgStruct_1a06b9b3e9423f35edfb96df7b04828bba" compoundref="CanMessage_8h" startline="31">CanMsgStruct::c_time</references>
        <references refid="classCanModule_1_1CCanAccess_1aa8e0e974863874b0e7bbcdb57084c241" compoundref="CCanAccess_8h" startline="320">CanModule::CCanAccess::canMessageCame</references>
        <references refid="namespaceCanModule_1a3ec3082d7d11a9c1641023cb3f53cbe5" compoundref="CanModuleUtils_8cpp" startline="49" endline="57">CanModule::convertTimepointToTimeval</references>
        <references refid="classSTCanScan_1af6cf11abff5d1b39b35ceff9ae857270" compoundref="STCanScan_8cpp" startline="78" endline="92">createInitializationParameters</references>
        <references refid="namespaceCanModule_1a6d0711aac0a75de5d2bf6142997a814d" compoundref="CanModuleUtils_8cpp" startline="79" endline="79">CanModule::currentTimeTimeval</references>
        <references refid="classSTCanScan_1a471b6a8617a57b974cb71a2dc540d370" compoundref="STCanScan_8h" startline="71" endline="71">getReconnectAction</references>
        <references refid="classSTCanScan_1a01b70015904374f482647fbfb1806b08" compoundref="STCanScan_8h" startline="70" endline="70">getReconnectCondition</references>
        <references refid="classCanModule_1_1CCanAccess_1a79c236a0e2b3e3b183b1c85aab3f5b71" compoundref="CCanAccess_8h" startline="482" endline="487">CanModule::CCanAccess::hasTimeoutOnReception</references>
        <references refid="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" compoundref="STCanScan_8h" startline="81">m_baudRate</references>
        <references refid="classSTCanScan_1abd418113d56ef882bb12cd7473d031e1" compoundref="STCanScan_8h" startline="86">m_CanScanThreadShutdownFlag</references>
        <references refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" compoundref="STCanScan_8h" startline="77">m_channelNumber</references>
        <references refid="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" compoundref="STCanScan_8h" startline="76">m_moduleNumber</references>
        <references refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" compoundref="STCanScan_8h" startline="80">m_statistics</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <references refid="STCanScan_8cpp_1a08d6d35b7f83e326a37caa39473e6ebe" compoundref="STCanScan_8cpp" startline="37">MLOGST</references>
        <references refid="classCanModule_1_1CanStatistics_1a82b38a2383bc0ad6b1d306e86b9ef5c6" compoundref="CanStatistics_8cpp" startline="76" endline="82">CanModule::CanStatistics::onReceive</references>
        <references refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</references>
        <references refid="classCanModule_1_1CCanAccess_1aa12f64e9e31bd491f39fc3169b1e5025" compoundref="CCanAccess_8h" startline="449" endline="455">CanModule::CCanAccess::reconnectActionString</references>
        <references refid="classCanModule_1_1CCanAccess_1a9da88ce122d5de04a0235a4682a13dc0" compoundref="CCanAccess_8h" startline="437" endline="444">CanModule::CCanAccess::reconnectConditionString</references>
        <references refid="classCanModule_1_1CCanAccess_1a067f50699c1ed4b6ee6732eb0078ed0a" compoundref="CCanAccess_8h" startline="492" endline="494">CanModule::CCanAccess::resetTimeoutOnReception</references>
        <references refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" compoundref="STCanScan_8cpp" startline="380" endline="393">sendErrorCode</references>
        <references refid="classSTCanScan_1ae29a23d161c115f173cbdb3a807c895e" compoundref="STCanScan_8h" startline="103" endline="103">setCanHandleInUse</references>
        <references refid="classCanModule_1_1CanStatistics_1a99de404f1b24cee80edfaad7ad1f9499" compoundref="CanStatistics_8h" startline="102" endline="102">CanModule::CanStatistics::setTimeSinceReceived</references>
        <references refid="namespaceCanModule_1a2062089fa4fa87c8354295f2a8fe31a5a5f768fefafa6db21eee26885afb6163d">CanModule::singleBus</references>
        <references refid="namespaceCanModule_1a2f4fee79cc7ba53467c2538fe6b9adbbaba350cf15e5a1471109f17351afb401a">CanModule::timeoutOnReception</references>
        <referencedby refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" compoundref="STCanScan_8cpp" startline="211" endline="239">createBus</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1af6cf11abff5d1b39b35ceff9ae857270" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>tUcanInitCanParam</type>
        <definition>tUcanInitCanParam STCanScan::createInitializationParameters</definition>
        <argsstring>(unsigned int br)</argsstring>
        <name>createInitializationParameters</name>
        <param>
          <type>unsigned int</type>
          <declname>br</declname>
          <defname>baudRate</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We create and fill initializationParameters, to pass it to openCanPort </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="93" column="26" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="78" bodyend="92"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" compoundref="STCanScan_8cpp" startline="245" endline="286">configureCanBoard</referencedby>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1ae29a23d161c115f173cbdb3a807c895e" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void STCanScan::setCanHandleInUse</definition>
        <argsstring>(int n, bool t)</argsstring>
        <name>setCanHandleInUse</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="103" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="103" bodyend="103"/>
        <referencedby refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" compoundref="STCanScan_8cpp" startline="98" endline="167">CanScanControlThread</referencedby>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a2f2a9aaa3ce2c653a4e1152eb8497493" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool STCanScan::isCanHandleInUse</definition>
        <argsstring>(int n)</argsstring>
        <name>isCanHandleInUse</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="104" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="104" bodyend="104"/>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a50f89ce5fc0b2961937dc8a4b86081f8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void STCanScan::setCanHandle</definition>
        <argsstring>(int n, tUcanHandle tU)</argsstring>
        <name>setCanHandle</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>tUcanHandle</type>
          <declname>tU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="105" column="13" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="105" bodyend="105"/>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a29b4c3c8f29e45f808fbb7528e4593aa" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>tUcanHandle</type>
        <definition>static tUcanHandle STCanScan::getCanHandle</definition>
        <argsstring>(int n)</argsstring>
        <name>getCanHandle</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="106" column="20" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="106" bodyend="106"/>
        <referencedby refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" compoundref="STCanScan_8cpp" startline="321" endline="352">openCanPort</referencedby>
      </memberdef>
      <memberdef kind="function" id="classSTCanScan_1a50337fe307a73461cce620c6cb6b8fe9" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int STCanScan::reconnectAllPorts</definition>
        <argsstring>(tUcanHandle h)</argsstring>
        <name>reconnectAllPorts</name>
        <param>
          <type>tUcanHandle</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>hard reset the bridge and reconnect all ports and handlers: windows </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CanInterfaceImplementations/systec/STCanScan.h" line="111" column="12" bodyfile="CanInterfaceImplementations/systec/STCanScan.cpp" bodystart="398" bodyend="418"/>
        <references refid="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" compoundref="STCanScan_8h" startline="76">m_moduleNumber</references>
        <references refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" compoundref="STCanScan_8h" startline="79">m_UcanHandle</references>
        <referencedby refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" compoundref="STCanScan_8cpp" startline="431" endline="511">sendMessage</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>CanModule::CCanAccess</label>
        <link refid="classCanModule_1_1CCanAccess"/>
      </node>
      <node id="1">
        <label>STCanScan</label>
        <link refid="classSTCanScan"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>CanModule::CanParameters</label>
        <link refid="structCanModule_1_1CanParameters"/>
      </node>
      <node id="4">
        <label>CanModule::CanStatistics</label>
        <link refid="classCanModule_1_1CanStatistics"/>
        <childnode refid="5" relation="usage">
          <edgelabel>m_internals</edgelabel>
        </childnode>
      </node>
      <node id="5">
        <label>CanModule::CanStatistics::Internals</label>
        <link refid="classCanModule_1_1CanStatistics_1_1Internals"/>
      </node>
      <node id="2">
        <label>CanModule::CCanAccess</label>
        <link refid="classCanModule_1_1CCanAccess"/>
        <childnode refid="3" relation="usage">
          <edgelabel>m_CanParameters</edgelabel>
        </childnode>
      </node>
      <node id="1">
        <label>STCanScan</label>
        <link refid="classSTCanScan"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>m_statistics</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="CanInterfaceImplementations/systec/STCanScan.h" line="40" column="1" bodyfile="CanInterfaceImplementations/systec/STCanScan.h" bodystart="39" bodyend="116"/>
    <listofallmembers>
      <member refid="classCanModule_1_1CCanAccess_1aa8e0e974863874b0e7bbcdb57084c241" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>canMessageCame</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a33fbd693f04b4f4e21cee20856c44866" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>canMessageError</name></member>
      <member refid="classSTCanScan_1aab42375da764eb0d50dee318cd790646" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>CanScanControlThread</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a7c9b87d205b0ec265c972a3303cecda2" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>CCanAccess</name></member>
      <member refid="classSTCanScan_1adc2d61ba13c40e436deabbc6474ffb3e" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>configureCanBoard</name></member>
      <member refid="classSTCanScan_1ad45582e26b616cbaa3d6978008819ab8" prot="public" virt="virtual"><scope>STCanScan</scope><name>createBus</name></member>
      <member refid="classSTCanScan_1af6cf11abff5d1b39b35ceff9ae857270" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>createInitializationParameters</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a24494114ec0dc237b63fb321ba4d084e" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>decreaseSendFailedCountdown</name></member>
      <member refid="classSTCanScan_1a54da665706336c8fab2f1c32b64056c5" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>errorCodeToString</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ac3f5126ae36d642217425e21696d19ca" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>getBusName</name></member>
      <member refid="classSTCanScan_1a29b4c3c8f29e45f808fbb7528e4593aa" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>getCanHandle</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a8210a8161f1987973584b6dda5dc6d7d" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>getLogItInstance</name></member>
      <member refid="classSTCanScan_1a91743fa3da0804c3bf55e40c8c8da9b6" prot="public" virt="virtual"><scope>STCanScan</scope><name>getPortBitrate</name></member>
      <member refid="classSTCanScan_1a27eabd471d3bb8154dfadb677c66e1d5" prot="public" virt="virtual"><scope>STCanScan</scope><name>getPortStatus</name></member>
      <member refid="classSTCanScan_1a471b6a8617a57b974cb71a2dc540d370" prot="public" virt="virtual"><scope>STCanScan</scope><name>getReconnectAction</name></member>
      <member refid="classSTCanScan_1a01b70015904374f482647fbfb1806b08" prot="public" virt="virtual"><scope>STCanScan</scope><name>getReconnectCondition</name></member>
      <member refid="classSTCanScan_1a4810249805b660c4e914247acbdf45d2" prot="public" virt="virtual"><scope>STCanScan</scope><name>getStatistics</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a79c236a0e2b3e3b183b1c85aab3f5b71" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>hasTimeoutOnReception</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ab5a430fc27073d92c69659bda261b74d" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>initialiseLogging</name></member>
      <member refid="classSTCanScan_1a2f2a9aaa3ce2c653a4e1152eb8497493" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>isCanHandleInUse</name></member>
      <member refid="classSTCanScan_1ab9c50de0ed0386a7826c6bbabafc4117" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>logItHandle</name></member>
      <member refid="classSTCanScan_1add0582f666b4f0a5883311a284a0e9c4" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_baudRate</name></member>
      <member refid="classSTCanScan_1aa1c2f27f78da63fc7d1f542f818b9624" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_busStatus</name></member>
      <member refid="classSTCanScan_1a8d6dd7c1cbf4a97607909086da6361e1" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_canHandleNumber</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a484a4f9dc352fe31b4baff0365095705" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_CanParameters</name></member>
      <member refid="classSTCanScan_1abd418113d56ef882bb12cd7473d031e1" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_CanScanThreadShutdownFlag</name></member>
      <member refid="classSTCanScan_1ac5e311e695c1a3c810f82b0c21ee3618" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_channelNumber</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a2a102ce44fed6b6703c50fc82babb7bf" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_dnow</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a7ce1180a014b0375e200accd6564d1a6" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_dopen</name></member>
      <member refid="classCanModule_1_1CCanAccess_1af1e7da250f5f36b8f2d4ce6b9d9f93df" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_dreceived</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a70a2966f190a0956aec8cded6009fe98" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_dtransmitted</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a6f97774773e3e4457f38a7b612d991f0" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_failedSendCountdown</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a41af60558bdb3b738f39560755864333" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_hCanReconnectionThread</name></member>
      <member refid="classSTCanScan_1a2a57272e12f97f245e6f204347782bc0" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_hCanScanThread</name></member>
      <member refid="classSTCanScan_1a8ae65fcef31d4bb84aa5bb8978973f86" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_idCanScanThread</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a782b2e9b52ebb49a14307e1f37440490" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_lh</name></member>
      <member refid="classSTCanScan_1acf5dfe6c253afa4e08e883f8177e2eb3" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_logItHandleSt</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a2bb6325281679f955ab32fc18367a7b3" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_logItRemoteInstance</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a2dbf5862f3818d94bc78dd9ccb5c73d0" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_maxFailedSendCount</name></member>
      <member refid="classSTCanScan_1a38531e0fcde0f184eb968a01fb5984c9" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_moduleNumber</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a6baf24c56eb715adf55a569d08b12c25" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_reconnectAction</name></member>
      <member refid="classCanModule_1_1CCanAccess_1abfd40edc34a777a5ff4503a6e8a239d6" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_reconnectCondition</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a9edb8bed739db66c1a6a8b3489ce79a2" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_reconnection_cv</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a08cc164e3baaf95fedeb50198a7fa799" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_reconnection_mtx</name></member>
      <member refid="classCanModule_1_1CCanAccess_1aadb73de7daf5d5bf35e47cccacd4ebc7" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_reconnectTrigger</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a3a7a432d8d12f931c97ee0e91f35b1dd" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_sBusName</name></member>
      <member refid="classSTCanScan_1a93abd76cf68726a0bfa4b9d3982ec9aa" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_statistics</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ae83a522e598248d1814685e9fc34d9d0" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>m_timeoutOnReception</name></member>
      <member refid="classSTCanScan_1add94dcac99b3ba3a17cb3708fd0cd20d" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>m_UcanHandle</name></member>
      <member refid="classSTCanScan_1a5f74df7e9615929365b33c08e709e918" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>openCanPort</name></member>
      <member refid="classSTCanScan_1a7c2d148e988e8b7e9df6b4ab0ed2dda1" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>operator=</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ac78e7df675c7e59f04ecc642406fecbe" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>parseNameAndParameters</name></member>
      <member refid="classCanModule_1_1CCanAccess_1aa12f64e9e31bd491f39fc3169b1e5025" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>reconnectActionString</name></member>
      <member refid="classSTCanScan_1a50337fe307a73461cce620c6cb6b8fe9" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>reconnectAllPorts</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a9da88ce122d5de04a0235a4682a13dc0" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>reconnectConditionString</name></member>
      <member refid="classCanModule_1_1CCanAccess_1aad13b5ad34547cbe6cad4e8369557bed" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>resetSendFailedCountdown</name></member>
      <member refid="classCanModule_1_1CCanAccess_1afefee3a90966dd8a01ca471022a7a9cd" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>resetTimeNow</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a067f50699c1ed4b6ee6732eb0078ed0a" prot="protected" virt="non-virtual"><scope>STCanScan</scope><name>resetTimeoutOnReception</name></member>
      <member refid="classSTCanScan_1ac3f6c36fec9666c086da47f241f75dba" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>s_canHandleArray</name></member>
      <member refid="classSTCanScan_1a310439aeb8688c29fb3fe8faa4a9e198" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>s_isCanHandleInUseArray</name></member>
      <member refid="classSTCanScan_1a43454c0bc20eb764cbb4ef3dd5e52cc9" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>sendErrorCode</name></member>
      <member refid="classSTCanScan_1a45f0ec011022bf58a23e8370bac7f829" prot="public" virt="virtual"><scope>STCanScan</scope><name>sendMessage</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ad0360c49d00ec0ee92cfdd73c2e43935" prot="public" virt="virtual" ambiguityscope="CanModule::CCanAccess::"><scope>STCanScan</scope><name>sendMessage</name></member>
      <member refid="classSTCanScan_1a2c1de002fa7ace90ef95af00f824c8e4" prot="public" virt="virtual"><scope>STCanScan</scope><name>sendRemoteRequest</name></member>
      <member refid="classSTCanScan_1a50f89ce5fc0b2961937dc8a4b86081f8" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>setCanHandle</name></member>
      <member refid="classSTCanScan_1ae29a23d161c115f173cbdb3a807c895e" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>setCanHandleInUse</name></member>
      <member refid="classSTCanScan_1a17bfbbb7ad6c03fc1ec9ef5f6fed0d3f" prot="public" virt="virtual"><scope>STCanScan</scope><name>setReconnectBehavior</name></member>
      <member refid="classSTCanScan_1a2525cc89387ee92ce7e62be414d3c83e" prot="public" virt="virtual"><scope>STCanScan</scope><name>setReconnectFailedSendCount</name></member>
      <member refid="classSTCanScan_1adca4386c1a008644c27f1d8e7c395272" prot="public" virt="virtual"><scope>STCanScan</scope><name>setReconnectReceptionTimeout</name></member>
      <member refid="classSTCanScan_1a794110572725db6b7c153104ee1330b3" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>STcanGetErrorText</name></member>
      <member refid="classSTCanScan_1a75fcb8ff51d82d362edb1dd31125fb10" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>STCanScan</name></member>
      <member refid="classSTCanScan_1a335aaec2300f2b9c31fd0f268014f24d" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>STCanScan</name></member>
      <member refid="classSTCanScan_1ae88b966c3c318eca384385c5a85cf2d7" prot="public" virt="virtual"><scope>STCanScan</scope><name>stopBus</name></member>
      <member refid="classCanModule_1_1CCanAccess_1a16e43f90cd984b9ea72028c0f8dfe784" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>triggerReconnectionThread</name></member>
      <member refid="classSTCanScan_1aa57c48594c8a70a0331f07fb4ad208fd" prot="private" virt="non-virtual"><scope>STCanScan</scope><name>vendorBaudRate2UserBaudRate</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ad8afab7f9acc769c53574edec695065b" prot="public" virt="non-virtual"><scope>STCanScan</scope><name>waitForReconnectionThreadTrigger</name></member>
      <member refid="classCanModule_1_1CCanAccess_1ac96f1cce6beda4309cdfb6651d3ce547" prot="public" virt="virtual"><scope>STCanScan</scope><name>~CCanAccess</name></member>
      <member refid="classSTCanScan_1a2f3398dc992ebd90002c179305c55d54" prot="public" virt="virtual"><scope>STCanScan</scope><name>~STCanScan</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
