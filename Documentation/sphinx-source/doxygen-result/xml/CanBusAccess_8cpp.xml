<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="CanBusAccess_8cpp" kind="file" language="C++">
    <compoundname>CanBusAccess.cpp</compoundname>
    <includes refid="CanBusAccess_8h" local="yes">CanBusAccess.h</includes>
    <incdepgraph>
      <node id="18">
        <label>atomic</label>
      </node>
      <node id="17">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="13">
        <label>LogIt.h</label>
      </node>
      <node id="16">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="14">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stdexcept</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="22">
        <label>VERSION.h</label>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="11">
        <label>boost/bind/bind.hpp</label>
      </node>
      <node id="10">
        <label>condition_variable</label>
      </node>
      <node id="2">
        <label>CanBusAccess.h</label>
        <link refid="CanBusAccess_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>sstream</label>
      </node>
      <node id="1">
        <label>CanInterface/src/CanBusAccess.cpp</label>
        <link refid="CanBusAccess_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>sys/time.h</label>
      </node>
      <node id="7">
        <label>iostream</label>
      </node>
      <node id="8">
        <label>chrono</label>
      </node>
      <node id="9">
        <label>thread</label>
      </node>
      <node id="19">
        <label>CanModuleUtils.h</label>
        <link refid="CanModuleUtils_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceCanModule">CanModule</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="24"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanBusAccess_8h" kindref="compound">CanBusAccess.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceCanModule" kindref="compound">CanModule</ref></highlight></codeline>
<codeline lineno="27"><highlight class="normal">{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="classCanModule_1_1CanBusAccess_1a30200d7e59055a516aceeba6c2bb534e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanBusAccess_1a30200d7e59055a516aceeba6c2bb534e" kindref="member">CanBusAccess::closeCanBus</ref>(<ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*cInter)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>LOG(Log::INF)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>cInter<sp/>!=<sp/>0<sp/>){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref><sp/>*dlcan;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map&lt;string,<sp/>CanLibLoader<sp/>*&gt;::iterator<sp/>itcomponent;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>bus<sp/>=<sp/>cInter-&gt;<ref refid="classCanModule_1_1CCanAccess_1ac3f5126ae36d642217425e21696d19ca" kindref="member">getBusName</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nameComponent<sp/>=<sp/>bus.substr(0,<sp/>bus.find_first_of(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itcomponent<sp/>=<sp/><ref refid="classCanModule_1_1CanBusAccess_1ab176a257849ee165a9ff41ad6e4222c6" kindref="member">m_libLoader_map</ref>.find(nameComponent);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlcan<sp/>=<sp/>(*itcomponent).second;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlcan-&gt;<ref refid="classCanModule_1_1CanLibLoader_1acd7d3af103bb72d5bd18737333d682f4" kindref="member">closeCanBus</ref>(cInter);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classCanModule_1_1CanBusAccess_1a487bdb65dc69be65d67721b63e38324b" refkind="member"><highlight class="normal"><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref>*<sp/><ref refid="classCanModule_1_1CanBusAccess_1a487bdb65dc69be65d67721b63e38324b" kindref="member">CanBusAccess::openCanBus</ref>(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parameters)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;string,<sp/>CanLibLoader<sp/>*&gt;::iterator<sp/>itcomponent;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>map&lt;string,<sp/>CCanAccess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref><sp/>*dlcan<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>nameComponent;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>it<sp/>=<sp/><ref refid="classCanModule_1_1CanBusAccess_1a72f3cde5eb8a7fab358f5c00e5d53487" kindref="member">m_canAccess_map</ref>.find(name);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(it<sp/>==<sp/><ref refid="classCanModule_1_1CanBusAccess_1a72f3cde5eb8a7fab358f5c00e5d53487" kindref="member">m_canAccess_map</ref>.end()))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*it).second;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>nameComponent<sp/>=<sp/>name.substr(0,<sp/>name.find_first_of(</highlight><highlight class="charliteral">&apos;:&apos;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>itcomponent<sp/>=<sp/><ref refid="classCanModule_1_1CanBusAccess_1ab176a257849ee165a9ff41ad6e4222c6" kindref="member">m_libLoader_map</ref>.find(nameComponent);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(itcomponent<sp/>==<sp/><ref refid="classCanModule_1_1CanBusAccess_1ab176a257849ee165a9ff41ad6e4222c6" kindref="member">m_libLoader_map</ref>.end()))<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlcan<sp/>=<sp/>(*itcomponent).second;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dlcan<sp/>=<sp/><ref refid="classCanModule_1_1CanLibLoader_1ab22f43105bfc9cab3c0749b83c867352" kindref="member">CanLibLoader::createInstance</ref>((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)nameComponent.c_str());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dlcan<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanBusAccess_1ab176a257849ee165a9ff41ad6e4222c6" kindref="member">m_libLoader_map</ref>.insert(map&lt;string,<sp/>CanLibLoader<sp/>*&gt;::value_type(nameComponent,<sp/>dlcan));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*tcca<sp/>=<sp/>dlcan-&gt;<ref refid="classCanModule_1_1CanLibLoader_1aaac995d89efdcf2b673cbd3e678be55b" kindref="member">openCanBus</ref>(name,<sp/>parameters);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcca;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="CanInterface/src/CanBusAccess.cpp"/>
  </compounddef>
</doxygen>
