<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="canmodule__wrapper_8h" kind="file">
    <compoundname>canmodule_wrapper.h</compoundname>
    <includes local="no">boost/thread.hpp</includes>
    <includes local="no">boost/signals2.hpp</includes>
    <includes local="no">boost/bind.hpp</includes>
    <includes refid="CanBusAccess_8h" local="no">CanBusAccess.h</includes>
    <includes refid="CanMessage_8h" local="no">CanMessage.h</includes>
    <includes local="yes">/usr/include/linux/can.h</includes>
    <includedby refid="canmodule__wrapper_8cpp" local="yes">CWrapper/src/canmodule_wrapper.cpp</includedby>
    <incdepgraph>
      <node id="513">
        <label>stdatomic.h</label>
      </node>
      <node id="516">
        <label>LogIt.h</label>
      </node>
      <node id="512">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="513" relation="include">
        </childnode>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
        <childnode refid="515" relation="include">
        </childnode>
      </node>
      <node id="501">
        <label>CWrapper/include/canmodule_wrapper.h</label>
        <link refid="canmodule_wrapper.h"/>
        <childnode refid="502" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="505" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="517" relation="include">
        </childnode>
      </node>
      <node id="503">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="507">
        <label>string</label>
      </node>
      <node id="508">
        <label>map</label>
      </node>
      <node id="502">
        <label>boost/thread.hpp</label>
      </node>
      <node id="509">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="510" relation="include">
        </childnode>
        <childnode refid="504" relation="include">
        </childnode>
        <childnode refid="503" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="511" relation="include">
        </childnode>
        <childnode refid="512" relation="include">
        </childnode>
        <childnode refid="516" relation="include">
        </childnode>
      </node>
      <node id="511">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="510" relation="include">
        </childnode>
      </node>
      <node id="517">
        <label>/usr/include/linux/can.h</label>
      </node>
      <node id="510">
        <label>sys/time.h</label>
      </node>
      <node id="504">
        <label>boost/bind.hpp</label>
      </node>
      <node id="515">
        <label>chrono</label>
      </node>
      <node id="506">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="507" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="514" relation="include">
        </childnode>
      </node>
      <node id="514">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="505">
        <label>CanBusAccess.h</label>
        <link refid="CanBusAccess_8h"/>
        <childnode refid="506" relation="include">
        </childnode>
        <childnode refid="509" relation="include">
        </childnode>
        <childnode refid="508" relation="include">
        </childnode>
        <childnode refid="507" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="518">
        <label>CWrapper/include/canmodule_wrapper.h</label>
        <link refid="canmodule_wrapper.h"/>
        <childnode refid="519" relation="include">
        </childnode>
      </node>
      <node id="519">
        <label>CWrapper/src/canmodule_wrapper.cpp</label>
        <link refid="canmodule__wrapper_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structRECEPTION__t" prot="public">RECEPTION_t</innerclass>
    <innerclass refid="structCAN__CONNECTION__t" prot="public">CAN_CONNECTION_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" prot="public" static="no">
        <name>EXTERNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>canmodule_wrapper h: this is C++ code compiled with extern &quot;C&quot; to give a C API to canmodule which is callable </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="24" column="10" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36" prot="public" static="no">
        <name>VENDORLIBS_t</name>
        <enumvalue id="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36a710765a5330e82d1c3835fb0042add20" prot="public">
          <name>systec</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36ad06a92d0d6cdaddebd5e2cc64627ad4f" prot="public">
          <name>anagate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36a51fa00fc8382ad4039af8fcb2d156389" prot="public">
          <name>peak</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>access to ports of (vendor) bridges, for send and receive. Each connection is one CAN port for sending and receiving messages. Bridge modules have varying number or CAN ports and PC ports, depending on the module/vendor type. The object references CanLibLoader and CCanAccess are of course &quot;per vendor&quot; and &quot;per PC port&quot;, but in order to simplify lets keep a distinct reference for each connection. Those two objects have each several references therefore (or: several pointers point to the same object). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="73" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" bodystart="73" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="canmodule__wrapper_8h_1a2578927b838f6c7dc02e705a75933e9c" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* canmodule_access_t</definition>
        <argsstring></argsstring>
        <name>canmodule_access_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="83" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="canmodule__wrapper_8h_1a694d64db9a7c4c1661f9a5427d1a45df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> <ref refid="CanMessage_8h_1a03d03a5783fcae48487adf7c1ef990f3" kindref="member">CanMessage</ref></type>
        <definition>EXTERNC CanMessage canmodule_reformat2CanModuleMessage</definition>
        <argsstring>(can_frame)</argsstring>
        <name>canmodule_reformat2CanModuleMessage</name>
        <param>
          <type>can_frame</type>
          <defname>m_in</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reformat a linux can frame to a CanMessage (<ref refid="namespaceCanModule" kindref="compound">CanModule</ref> format with extra tits and tats). Kind of stupid, but for cleanliness let&apos;s have it.</para><para>struct can_frame - basic CAN frame structure : CAN ID of the frame and CAN_*_FLAG flags, see canid_t definition : frame payload length in byte (0 .. 8) aka data length code N.B. the DLC field from ISO 11898-1 Chapter 8.4.2.3 has a 1:1 mapping of the &apos;data length code&apos; to the real payload length : CAN frame payload (up to 8 byte)</para><para>struct can_frame { canid_t can_id; 32 bit CAN_ID + EFF/RTR/ERR flags <bold>u8 can_dlc; frame payload length in byte (0 .. CAN_MAX_DLEN) __u8 data[CAN_MAX_DLEN] __attribute</bold>((aligned(8))); } ;</para><para>Struct that defines a Can Message, used by CCanAccess</para><para>typedef struct <ref refid="structCanMsgStruct" kindref="compound">CanMsgStruct</ref> { //Identifier of the message long c_id; //Flags activated in the message unsigned char c_ff; //Length of the message unsigned char c_dlc; //Body of the message unsigned char c_data[8]; //Timestamp of the message struct timeval c_time; //Is the message a remote Transmission request? Must be true for remote request frames and false for data frames bool c_rtr; #ifdef __cplusplus public: <ref refid="structCanMsgStruct" kindref="compound">CanMsgStruct()</ref> : c_id(0), c_ff(0), c_dlc(0), c_rtr(false) { /// todo memset, and message length &gt; 8 for extended CAN for (int i=0; i&lt;8; i++) c_data[i] = 0; } #endif //Be careful when using this struct from C</para><para>} CanMessage; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="84" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="482" bodyend="490"/>
        <references refid="structCanMsgStruct_1a2e47a33e7bba46b05a8fff29433f047b" compoundref="CanMessage_8h" startline="29">CanMsgStruct::c_data</references>
        <references refid="structCanMsgStruct_1a3e5add8ae9cdadfcf3f2255d375ec9b3" compoundref="CanMessage_8h" startline="27">CanMsgStruct::c_dlc</references>
        <references refid="structCanMsgStruct_1a619515aef041e64b78e7e8c33989ddd0" compoundref="CanMessage_8h" startline="23">CanMsgStruct::c_id</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1a2e702e2de7a34b14736a8121948ee57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> can_frame</type>
        <definition>EXTERNC can_frame canmodule_reformat2LinuxFrame</definition>
        <argsstring>(CanMessage m_in)</argsstring>
        <name>canmodule_reformat2LinuxFrame</name>
        <param>
          <type><ref refid="CanMessage_8h_1a03d03a5783fcae48487adf7c1ef990f3" kindref="member">CanMessage</ref></type>
          <declname>m_in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="85" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="491" bodyend="498"/>
        <references refid="structCanMsgStruct_1a2e47a33e7bba46b05a8fff29433f047b" compoundref="CanMessage_8h" startline="29">CanMsgStruct::c_data</references>
        <references refid="structCanMsgStruct_1a3e5add8ae9cdadfcf3f2255d375ec9b3" compoundref="CanMessage_8h" startline="27">CanMsgStruct::c_dlc</references>
        <references refid="structCanMsgStruct_1a619515aef041e64b78e7e8c33989ddd0" compoundref="CanMessage_8h" startline="23">CanMsgStruct::c_id</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1ae31631636034d5d449665eafa9c342ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> void</type>
        <definition>EXTERNC void canmodule_init</definition>
        <argsstring>(int connectionIndex, Log::LOG_LEVEL loglevel, vector&lt; string &gt; canmoduleParameters)</argsstring>
        <name>canmodule_init</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <param>
          <type>Log::LOG_LEVEL</type>
          <declname>loglevel</declname>
        </param>
        <param>
          <type>vector&lt; string &gt;</type>
          <declname>canmoduleParameters</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>connect one can access point=one CAN port for sending or receiving We need some parameters to set this up: canmoduleParameters [0]=vendor, &quot;an&quot;, &quot;st&quot; [1]=can port number then, according to vendor: st: [2]=usb port number [3]=systec parameters, i.e baudrate = &quot;250000&quot;</para><para>an: [2]=ip number [3]=anagate parameters = up to 6 integers separated by whitespaces, i.e. for bitrate=250kbit/s, opmode=normal, terminated=true, no high speed, no time stamp, sync mode=true &quot;250000 0 1 0 0 1&quot;; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="87" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="280" bodyend="407"/>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="canmodule__wrapper_8cpp_1ae0253b00a2913d2b61a81c983bfbd822" compoundref="canmodule__wrapper_8cpp" startline="96">canmodule_delay_default</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
        <references refid="classCanModule_1_1CanLibLoader_1ab22f43105bfc9cab3c0749b83c867352" compoundref="CanLibLoader_8cpp" startline="45" endline="53">CanModule::CanLibLoader::createInstance</references>
        <references refid="structCAN__CONNECTION__t_1a28c64bd7c6af88c3bf92f318cc9c89a1" compoundref="canmodule__wrapper_8h" startline="80">CAN_CONNECTION_t::delay</references>
        <references refid="structCAN__CONNECTION__t_1a4307ead99fac10c9415801692a0e0bab" compoundref="canmodule__wrapper_8h" startline="77">CAN_CONNECTION_t::isConnected</references>
        <references refid="canmodule__wrapper_8cpp_1a6d635e7497e25d5788dcbf03125b0909" compoundref="canmodule__wrapper_8cpp" startline="134" endline="146">myUserHandler0</references>
        <references refid="canmodule__wrapper_8cpp_1ad360ca6338143d5c11a4531660b24ac0" compoundref="canmodule__wrapper_8cpp" startline="147" endline="153">myUserHandler1</references>
        <references refid="canmodule__wrapper_8cpp_1aa2e9edaf7bf96dbf37d3ecde32e88ada" compoundref="canmodule__wrapper_8cpp" startline="210" endline="216">myUserHandler10</references>
        <references refid="canmodule__wrapper_8cpp_1a203eae36ea11ab8beee391759e383116" compoundref="canmodule__wrapper_8cpp" startline="217" endline="223">myUserHandler11</references>
        <references refid="canmodule__wrapper_8cpp_1a86412e7ec2af43e4ddde98af880e5463" compoundref="canmodule__wrapper_8cpp" startline="224" endline="230">myUserHandler12</references>
        <references refid="canmodule__wrapper_8cpp_1accfea38d4ef6cf1adb7f29a87a381c45" compoundref="canmodule__wrapper_8cpp" startline="231" endline="237">myUserHandler13</references>
        <references refid="canmodule__wrapper_8cpp_1aea2a5f96b3137e0c77439dcda11b4139" compoundref="canmodule__wrapper_8cpp" startline="238" endline="244">myUserHandler14</references>
        <references refid="canmodule__wrapper_8cpp_1a7fddde7971ed0ad3524ec2135f1dea04" compoundref="canmodule__wrapper_8cpp" startline="245" endline="251">myUserHandler15</references>
        <references refid="canmodule__wrapper_8cpp_1a8d9a98bb375b5e23917e4167228db82d" compoundref="canmodule__wrapper_8cpp" startline="154" endline="160">myUserHandler2</references>
        <references refid="canmodule__wrapper_8cpp_1a8a412ea2b9be94758e3fbf8f99f63989" compoundref="canmodule__wrapper_8cpp" startline="161" endline="167">myUserHandler3</references>
        <references refid="canmodule__wrapper_8cpp_1ae36fe0d1976785621770b4e3a3a2f022" compoundref="canmodule__wrapper_8cpp" startline="168" endline="174">myUserHandler4</references>
        <references refid="canmodule__wrapper_8cpp_1a672814a85db13a759e0e5c7896359734" compoundref="canmodule__wrapper_8cpp" startline="175" endline="181">myUserHandler5</references>
        <references refid="canmodule__wrapper_8cpp_1af882506f0473ebcf59193b06ed1bfd20" compoundref="canmodule__wrapper_8cpp" startline="182" endline="188">myUserHandler6</references>
        <references refid="canmodule__wrapper_8cpp_1a7d0f2c128bc7f98b1f2fc4ab692acdd9" compoundref="canmodule__wrapper_8cpp" startline="189" endline="195">myUserHandler7</references>
        <references refid="canmodule__wrapper_8cpp_1af8ae68234a4417c6a75bc972f7587fa7" compoundref="canmodule__wrapper_8cpp" startline="196" endline="202">myUserHandler8</references>
        <references refid="canmodule__wrapper_8cpp_1a7caf49e5654ea59a928c5c1e124ca623" compoundref="canmodule__wrapper_8cpp" startline="203" endline="209">myUserHandler9</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1a8d2c82f6455b57926fd1bbce466f2a90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> bool</type>
        <definition>EXTERNC bool canmodule_send</definition>
        <argsstring>(int connectionIndex, CanMessage cm)</argsstring>
        <name>canmodule_send</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <param>
          <type><ref refid="CanMessage_8h_1a03d03a5783fcae48487adf7c1ef990f3" kindref="member">CanMessage</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>no error checking, we might throw exceptions instead. OK=false </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="88" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="413" bodyend="430"/>
        <references refid="canmodule__wrapper_8cpp_1a2788c927e316fa9024211c35f4b524c7" compoundref="canmodule__wrapper_8cpp" startline="98" endline="109">_canmodule_slowDown</references>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="structCanMsgStruct_1a2e47a33e7bba46b05a8fff29433f047b" compoundref="CanMessage_8h" startline="29">CanMsgStruct::c_data</references>
        <references refid="structCanMsgStruct_1a619515aef041e64b78e7e8c33989ddd0" compoundref="CanMessage_8h" startline="23">CanMsgStruct::c_id</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1a0ad645413378e8b7d8bde2effe069639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> <ref refid="CanMessage_8h_1a03d03a5783fcae48487adf7c1ef990f3" kindref="member">CanMessage</ref></type>
        <definition>EXTERNC CanMessage canmodule_waitForNewCanMessage</definition>
        <argsstring>(int connectionIndex)</argsstring>
        <name>canmodule_waitForNewCanMessage</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>message reception. Wait until the buffer is refreshed, then copy the buffer and return it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="89" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="505" bodyend="544"/>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
        <references refid="canmodule__wrapper_8cpp_1a6f918d3da1aa14fc5c0a02d501fd46f2" compoundref="canmodule__wrapper_8cpp" startline="31">reception_cond0</references>
        <references refid="canmodule__wrapper_8cpp_1ab7cd61f650c5036e31b54e5ef3156abd" compoundref="canmodule__wrapper_8cpp" startline="32">reception_cond1</references>
        <references refid="canmodule__wrapper_8cpp_1a3e0bbc9181caa85f868d2fd2eb88d827" compoundref="canmodule__wrapper_8cpp" startline="41">reception_cond10</references>
        <references refid="canmodule__wrapper_8cpp_1a89c38d3167e6c2bfb3c890d7e6dfd612" compoundref="canmodule__wrapper_8cpp" startline="42">reception_cond11</references>
        <references refid="canmodule__wrapper_8cpp_1ae638c38ded1576fd744fb61f110d4fc9" compoundref="canmodule__wrapper_8cpp" startline="43">reception_cond12</references>
        <references refid="canmodule__wrapper_8cpp_1a851c07a40ba2aaa7365a8ce339bd2634" compoundref="canmodule__wrapper_8cpp" startline="44">reception_cond13</references>
        <references refid="canmodule__wrapper_8cpp_1af91ff7e198193bbbe93b31b3128021b8" compoundref="canmodule__wrapper_8cpp" startline="45">reception_cond14</references>
        <references refid="canmodule__wrapper_8cpp_1a444ac615d1e82962547e4f5efb0a2aa2" compoundref="canmodule__wrapper_8cpp" startline="46">reception_cond15</references>
        <references refid="canmodule__wrapper_8cpp_1a4271ddd144d9c22a586d92d9fe123476" compoundref="canmodule__wrapper_8cpp" startline="33">reception_cond2</references>
        <references refid="canmodule__wrapper_8cpp_1a0b29e5e0a2531e2632699298222647c5" compoundref="canmodule__wrapper_8cpp" startline="34">reception_cond3</references>
        <references refid="canmodule__wrapper_8cpp_1a6c0f68c41481427d54e128111b984ed8" compoundref="canmodule__wrapper_8cpp" startline="35">reception_cond4</references>
        <references refid="canmodule__wrapper_8cpp_1ab7c2f335ca2b48237a33f3e33618b5d1" compoundref="canmodule__wrapper_8cpp" startline="36">reception_cond5</references>
        <references refid="canmodule__wrapper_8cpp_1aaa125323603823b2a59b278cb8c10ad0" compoundref="canmodule__wrapper_8cpp" startline="37">reception_cond6</references>
        <references refid="canmodule__wrapper_8cpp_1a3f56c87445b7b4712f13d7cb34a72b15" compoundref="canmodule__wrapper_8cpp" startline="38">reception_cond7</references>
        <references refid="canmodule__wrapper_8cpp_1adf9fbd8b9f7b3b53eea2f0f9a5760c90" compoundref="canmodule__wrapper_8cpp" startline="39">reception_cond8</references>
        <references refid="canmodule__wrapper_8cpp_1ae2d7f292f7488d01c92f15985be09572" compoundref="canmodule__wrapper_8cpp" startline="40">reception_cond9</references>
        <references refid="canmodule__wrapper_8cpp_1aa9f4b1208b6394678f5e0d1f1e7e36b1" compoundref="canmodule__wrapper_8cpp" startline="31">reception_mtx0</references>
        <references refid="canmodule__wrapper_8cpp_1a7bf12edd06a1ab049ba210997fb50175" compoundref="canmodule__wrapper_8cpp" startline="32">reception_mtx1</references>
        <references refid="canmodule__wrapper_8cpp_1a8b129716b23d932845c6186c3ec029f8" compoundref="canmodule__wrapper_8cpp" startline="41">reception_mtx10</references>
        <references refid="canmodule__wrapper_8cpp_1af29d4db6e03a1c9628ffd6c6b8ac67b4" compoundref="canmodule__wrapper_8cpp" startline="42">reception_mtx11</references>
        <references refid="canmodule__wrapper_8cpp_1aeea85420dfcda3072bcc4b573e1fb3ad" compoundref="canmodule__wrapper_8cpp" startline="43">reception_mtx12</references>
        <references refid="canmodule__wrapper_8cpp_1aefedb7e42e884092080f74f02e7cf240" compoundref="canmodule__wrapper_8cpp" startline="44">reception_mtx13</references>
        <references refid="canmodule__wrapper_8cpp_1aa2e9f45e06d06b756c8e861e45531b56" compoundref="canmodule__wrapper_8cpp" startline="45">reception_mtx14</references>
        <references refid="canmodule__wrapper_8cpp_1a0cbc15fc736e7d9fbe34a03e18584705" compoundref="canmodule__wrapper_8cpp" startline="46">reception_mtx15</references>
        <references refid="canmodule__wrapper_8cpp_1a19a3db70e831ef946db7948e6cb7ebae" compoundref="canmodule__wrapper_8cpp" startline="33">reception_mtx2</references>
        <references refid="canmodule__wrapper_8cpp_1a5256771c6c6af33e299c9c85720bd9b5" compoundref="canmodule__wrapper_8cpp" startline="34">reception_mtx3</references>
        <references refid="canmodule__wrapper_8cpp_1ab92db4f19a9b79501aa5c8ca72764360" compoundref="canmodule__wrapper_8cpp" startline="35">reception_mtx4</references>
        <references refid="canmodule__wrapper_8cpp_1afc58d38b170c3fef1f42872c1c711870" compoundref="canmodule__wrapper_8cpp" startline="36">reception_mtx5</references>
        <references refid="canmodule__wrapper_8cpp_1a0083d75e0111f8214259f6ed175bfacb" compoundref="canmodule__wrapper_8cpp" startline="37">reception_mtx6</references>
        <references refid="canmodule__wrapper_8cpp_1a6cdb7a324a438bc7da5de93e78f65a44" compoundref="canmodule__wrapper_8cpp" startline="38">reception_mtx7</references>
        <references refid="canmodule__wrapper_8cpp_1ab09b51031c98224ff2582388d32dbd4e" compoundref="canmodule__wrapper_8cpp" startline="39">reception_mtx8</references>
        <references refid="canmodule__wrapper_8cpp_1a29c9f9e8a8cad4063ea5857c66b92c5e" compoundref="canmodule__wrapper_8cpp" startline="40">reception_mtx9</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1ab09dfa98b48b044f3d4bece77fcf790b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> void</type>
        <definition>EXTERNC void canmodule_testSignalSlot</definition>
        <argsstring>(int connectionIndex)</argsstring>
        <name>canmodule_testSignalSlot</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="90" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="254" bodyend="262"/>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
        <references refid="canmodule__wrapper_8cpp_1a2eb006bb00711238d0c51ef70240c03c" compoundref="canmodule__wrapper_8cpp" startline="22">CONNECTION_INDEX_MIN</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1a747219d5789f6532fc8c21650d9aee46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> void</type>
        <definition>EXTERNC void canmodule_delete</definition>
        <argsstring>(int connectionIndex)</argsstring>
        <name>canmodule_delete</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="91" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="546" bodyend="558"/>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
      </memberdef>
      <memberdef kind="function" id="canmodule__wrapper_8h_1ab33d59e710adfd13b4897bff30d45bcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref> void</type>
        <definition>EXTERNC void canmodule_setDelay_us</definition>
        <argsstring>(int connectionIndex, unsigned int dd)</argsstring>
        <name>canmodule_setDelay_us</name>
        <param>
          <type>int</type>
          <declname>connectionIndex</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>dd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h" line="92" column="1" bodyfile="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/src/canmodule_wrapper.cpp" bodystart="111" bodyend="117"/>
        <references refid="canmodule__wrapper_8cpp_1a07e3b62fb780778da4ae23f01cc453ab" compoundref="canmodule__wrapper_8cpp" startline="47">_connection_v</references>
        <references refid="canmodule__wrapper_8cpp_1aab71aed77e37ee6cc2d675dec800c07a" compoundref="canmodule__wrapper_8cpp" startline="23">CONNECTION_INDEX_MAX</references>
        <references refid="canmodule__wrapper_8cpp_1a2eb006bb00711238d0c51ef70240c03c" compoundref="canmodule__wrapper_8cpp" startline="22">CONNECTION_INDEX_MIN</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>CANMODULE_WRAPPER_INCLUDEGUARD</highlight></codeline>
<codeline lineno="7"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CANMODULE_WRAPPER_INCLUDEGUARD</highlight></codeline>
<codeline lineno="8"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>for<sp/>CanModule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/thread.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/signals2.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CanBusAccess_8h" kindref="compound">CanBusAccess.h</ref>&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>CanModule<sp/>entry<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CanMessage_8h" kindref="compound">CanMessage.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WIN32</highlight></codeline>
<codeline lineno="17"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="18"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;/usr/include/linux/can.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="20"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="22"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXTERNC<sp/>extern<sp/>&quot;C&quot;</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="24" refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXTERNC</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="26"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>WIN32</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CAN_MAX_DLEN<sp/>8</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="42"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint32_t<sp/>canid_t;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">can_frame<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>canid_t<sp/>can_id;<sp/><sp/></highlight><highlight class="comment">/*<sp/>32<sp/>bit<sp/>CAN_ID<sp/>+<sp/>EFF/RTR/ERR<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/>can_dlc;<sp/></highlight><highlight class="comment">/*<sp/>frame<sp/>payload<sp/>length<sp/>in<sp/>byte<sp/>(0<sp/>..<sp/>CAN_MAX_DLEN)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/><sp/><sp/><sp/>data[CAN_MAX_DLEN];<sp/></highlight><highlight class="comment">//<sp/>__attribute__((aligned(8)));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C-&gt;C++<sp/>wrapper</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structRECEPTION__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>boost::mutex<sp/>reception_mtx;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>boost::condition_variable_any<sp/>reception_cond;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="structRECEPTION__t_1a8d8bf1babc41081c01153ad80730b882" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structRECEPTION__t_1a8d8bf1babc41081c01153ad80730b882" kindref="member">newArrived</ref>;</highlight></codeline>
<codeline lineno="61" refid="structRECEPTION__t_1a480cf19b9c79a76e8d700b490650050b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCanMsgStruct" kindref="compound">CanMessage</ref><sp/><ref refid="structRECEPTION__t_1a480cf19b9c79a76e8d700b490650050b" kindref="member">receivedMessageBuffer</ref>;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}<sp/><ref refid="structRECEPTION__t" kindref="compound">RECEPTION_t</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>{<sp/><ref refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36a710765a5330e82d1c3835fb0042add20" kindref="member">systec</ref>,<sp/><ref refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36ad06a92d0d6cdaddebd5e2cc64627ad4f" kindref="member">anagate</ref>,<sp/><ref refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36a51fa00fc8382ad4039af8fcb2d156389" kindref="member">peak</ref><sp/>}<sp/><ref refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36" kindref="member">VENDORLIBS_t</ref>;</highlight></codeline>
<codeline lineno="74" refid="structCAN__CONNECTION__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="75" refid="structCAN__CONNECTION__t_1aaf42fa11130a0700442e166d8d61df9c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="canmodule__wrapper_8h_1a121921d4df4e9369cbb4664ea2f89e36" kindref="member">VENDORLIBS_t</ref><sp/><ref refid="structCAN__CONNECTION__t_1aaf42fa11130a0700442e166d8d61df9c" kindref="member">lib</ref>;</highlight></codeline>
<codeline lineno="76" refid="structCAN__CONNECTION__t_1a49c44af0963145bf5c2d8d3b6116882a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanModule::CanLibLoader</ref><sp/>*<ref refid="structCAN__CONNECTION__t_1a49c44af0963145bf5c2d8d3b6116882a" kindref="member">loader</ref>;</highlight></codeline>
<codeline lineno="77" refid="structCAN__CONNECTION__t_1a4307ead99fac10c9415801692a0e0bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structCAN__CONNECTION__t_1a4307ead99fac10c9415801692a0e0bab" kindref="member">isConnected</ref>;</highlight></codeline>
<codeline lineno="78" refid="structCAN__CONNECTION__t_1aac1832cba6d62a026031ed088dfa5da1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CanModule::CCanAccess</ref><sp/>*<ref refid="structCAN__CONNECTION__t_1aac1832cba6d62a026031ed088dfa5da1" kindref="member">cca</ref>;</highlight></codeline>
<codeline lineno="79" refid="structCAN__CONNECTION__t_1a31ab20f3606f5cb10289ea30d35839a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structRECEPTION__t" kindref="compound">RECEPTION_t</ref><sp/><ref refid="structCAN__CONNECTION__t_1a31ab20f3606f5cb10289ea30d35839a4" kindref="member">reception</ref>;</highlight></codeline>
<codeline lineno="80" refid="structCAN__CONNECTION__t_1a28c64bd7c6af88c3bf92f318cc9c89a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structCAN__CONNECTION__t_1a28c64bd7c6af88c3bf92f318cc9c89a1" kindref="member">delay</ref><sp/>;<sp/></highlight><highlight class="comment">//<sp/>=<sp/>1000000;<sp/>//<sp/>1kHz,<sp/>default,<sp/>works<sp/>for<sp/>iseg<sp/>systec<sp/>and<sp/>anagate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal">}<sp/><ref refid="structCAN__CONNECTION__t" kindref="compound">CAN_CONNECTION_t</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="canmodule__wrapper_8h_1a2578927b838f6c7dc02e705a75933e9c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="canmodule__wrapper_8h_1a2578927b838f6c7dc02e705a75933e9c" kindref="member">canmodule_access_t</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/><ref refid="structCanMsgStruct" kindref="compound">CanMessage</ref><sp/><ref refid="canmodule__wrapper_8h_1a694d64db9a7c4c1661f9a5427d1a45df" kindref="member">canmodule_reformat2CanModuleMessage</ref>(<sp/>can_frame<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/>can_frame<sp/><ref refid="canmodule__wrapper_8h_1a2e702e2de7a34b14736a8121948ee57f" kindref="member">canmodule_reformat2LinuxFrame</ref>(<sp/><ref refid="structCanMsgStruct" kindref="compound">CanMessage</ref><sp/>m_in<sp/>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="canmodule__wrapper_8h_1ae31631636034d5d449665eafa9c342ca" kindref="member">canmodule_init</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex,<sp/>Log::LOG_LEVEL<sp/>loglevel,<sp/>vector&lt;string&gt;<sp/>canmoduleParameters<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="canmodule__wrapper_8h_1a8d2c82f6455b57926fd1bbce466f2a90" kindref="member">canmodule_send</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex,<sp/><ref refid="structCanMsgStruct" kindref="compound">CanMessage</ref><sp/>cm<sp/>);<sp/></highlight><highlight class="comment">//<sp/>OK=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/><ref refid="structCanMsgStruct" kindref="compound">CanMessage</ref><sp/><ref refid="canmodule__wrapper_8h_1a0ad645413378e8b7d8bde2effe069639" kindref="member">canmodule_waitForNewCanMessage</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="canmodule__wrapper_8h_1ab09dfa98b48b044f3d4bece77fcf790b" kindref="member">canmodule_testSignalSlot</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="canmodule__wrapper_8h_1a747219d5789f6532fc8c21650d9aee46" kindref="member">canmodule_delete</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><ref refid="canmodule__wrapper_8h_1a95e1d92b2619a326b2e86600f3d23100" kindref="member">EXTERNC</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="canmodule__wrapper_8h_1ab33d59e710adfd13b4897bff30d45bcb" kindref="member">canmodule_setDelay_us</ref>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>connectionIndex,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dd<sp/>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>EXTERNC</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>CANMODULE_WRAPPER_INCLUDEGUARD</highlight></codeline>
    </programlisting>
    <location file="/home/mludwig/projects/CanModule/CanModule#singleLogItComponent/CanModule/CWrapper/include/canmodule_wrapper.h"/>
  </compounddef>
</doxygen>
