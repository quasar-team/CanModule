<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="pkcan_8h" kind="file">
    <compoundname>pkcan.h</compoundname>
    <includes local="no">string</includes>
    <includes local="yes">Winsock2.h</includes>
    <includes local="yes">windows.h</includes>
    <includes local="no">PCANBasic.h</includes>
    <includes refid="CCanAccess_8h" local="yes">CCanAccess.h</includes>
    <includes refid="CanStatistics_8h" local="yes">CanStatistics.h</includes>
    <includedby refid="pkcan_8cpp" local="yes">CanInterfaceImplementations/pkcan/pkcan.cpp</includedby>
    <incdepgraph>
      <node id="252">
        <label>stdatomic.h</label>
      </node>
      <node id="255">
        <label>LogIt.h</label>
      </node>
      <node id="244">
        <label>windows.h</label>
      </node>
      <node id="249">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="251">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
      </node>
      <node id="241">
        <label>CanInterfaceImplementations/pkcan/pkcan.h</label>
        <link refid="pkcan.h"/>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="243" relation="include">
        </childnode>
        <childnode refid="244" relation="include">
        </childnode>
        <childnode refid="245" relation="include">
        </childnode>
        <childnode refid="246" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
      </node>
      <node id="242">
        <label>string</label>
      </node>
      <node id="245">
        <label>PCANBasic.h</label>
      </node>
      <node id="246">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="247" relation="include">
        </childnode>
        <childnode refid="248" relation="include">
        </childnode>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="242" relation="include">
        </childnode>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="247" relation="include">
        </childnode>
      </node>
      <node id="243">
        <label>Winsock2.h</label>
      </node>
      <node id="247">
        <label>sys/time.h</label>
      </node>
      <node id="248">
        <label>boost/bind.hpp</label>
      </node>
      <node id="254">
        <label>chrono</label>
      </node>
      <node id="253">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="257">
        <label>CanInterfaceImplementations/pkcan/pkcan.cpp</label>
        <link refid="pkcan_8cpp"/>
      </node>
      <node id="256">
        <label>CanInterfaceImplementations/pkcan/pkcan.h</label>
        <link refid="pkcan.h"/>
        <childnode refid="257" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classPKCanScan" prot="public">PKCanScan</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="8"><highlight class="preprocessor">#ifndef<sp/>CCANPKSCAN_H_</highlight></codeline>
<codeline lineno="9"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>CCANPKSCAN_H_</highlight></codeline>
<codeline lineno="10"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Winsock2.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;windows.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;PCANBasic.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CCanAccess_8h" kindref="compound">CCanAccess.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanStatistics_8h" kindref="compound">CanStatistics.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">CanModule;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>an<sp/>implementation<sp/>of<sp/>the<sp/>abstract<sp/>class<sp/>CCanAccess.<sp/>It<sp/>serves<sp/>as<sp/>a<sp/>can<sp/>bus<sp/>access<sp/>layer<sp/>that<sp/>will<sp/>communicate<sp/>with<sp/>Peak<sp/>USB-CAN<sp/>devices<sp/>(Windows<sp/>only)</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classPKCanScan" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classPKCanScan" kindref="compound">PKCanScan</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CanModule::CCanAccess</ref></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Constructor<sp/>of<sp/>the<sp/>class.<sp/>Will<sp/>initiate<sp/>the<sp/>statistics.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPKCanScan" kindref="compound">PKCanScan</ref>();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Disables<sp/>copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPKCanScan" kindref="compound">PKCanScan</ref>(<ref refid="classPKCanScan" kindref="compound">PKCanScan</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Disables<sp/>asignation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classPKCanScan" kindref="compound">PKCanScan</ref>&amp;<sp/>operator=(<ref refid="classPKCanScan" kindref="compound">PKCanScan</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/>other)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Destructor<sp/>of<sp/>the<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classPKCanScan" kindref="compound">PKCanScan</ref>();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>createBus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parameters);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="38"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Method<sp/>that<sp/>sends<sp/>a<sp/>message<sp/>trough<sp/>the<sp/>can<sp/>bus<sp/>channel.<sp/>If<sp/>the<sp/>method<sp/>createBus<sp/>was<sp/>not<sp/>called<sp/>before<sp/>this,<sp/>sendMessage<sp/>will<sp/>fail,<sp/>as<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="39"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>can<sp/>bus<sp/>channel<sp/>to<sp/>send<sp/>a<sp/>message<sp/>trough.</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>cobID:<sp/>Identifier<sp/>that<sp/>will<sp/>be<sp/>used<sp/>for<sp/>the<sp/>message.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>len:<sp/>Length<sp/>of<sp/>the<sp/>message.<sp/>If<sp/>the<sp/>message<sp/>is<sp/>bigger<sp/>than<sp/>8<sp/>characters,<sp/>it<sp/>will<sp/>be<sp/>split<sp/>into<sp/>separate<sp/>8<sp/>characters<sp/>messages.</highlight></codeline>
<codeline lineno="42"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>message:<sp/>Message<sp/>to<sp/>be<sp/>sent<sp/>trough<sp/>the<sp/>can<sp/>bus.</highlight></codeline>
<codeline lineno="43"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>rtr:<sp/>is<sp/>the<sp/>message<sp/>a<sp/>remote<sp/>transmission<sp/>request?</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return:<sp/>Was<sp/>the<sp/>sending<sp/>process<sp/>successful?</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendMessage(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cobID,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*message,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>rtr<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Method<sp/>that<sp/>sends<sp/>a<sp/>remote<sp/>request<sp/>trough<sp/>the<sp/>can<sp/>bus<sp/>channel.<sp/>If<sp/>the<sp/>method<sp/>createBus<sp/>was<sp/>not<sp/>called<sp/>before<sp/>this,<sp/>sendMessage<sp/>will<sp/>fail,<sp/>as<sp/>there<sp/>is<sp/>no</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>can<sp/>bus<sp/>channel<sp/>to<sp/>send<sp/>the<sp/>request<sp/>trough.<sp/>Similar<sp/>to<sp/>sendMessage,<sp/>but<sp/>it<sp/>sends<sp/>an<sp/>special<sp/>message<sp/>reserved<sp/>for<sp/>requests.</highlight></codeline>
<codeline lineno="50"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@param<sp/>cobID:<sp/>Identifier<sp/>that<sp/>will<sp/>be<sp/>used<sp/>for<sp/>the<sp/>request.</highlight></codeline>
<codeline lineno="51"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>@return:<sp/>Was<sp/>the<sp/>initialisation<sp/>process<sp/>successful?</highlight></codeline>
<codeline lineno="52"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendRemoteRequest(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cobID);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Returns<sp/>the<sp/>instance<sp/>of<sp/>the<sp/>CanStatistics<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>getStatistics(<sp/><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanStatistics</ref><sp/>&amp;<sp/>result<sp/>);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>Converts<sp/>Error<sp/>code<sp/>into<sp/>a<sp/>text<sp/>message.</highlight></codeline>
<codeline lineno="59"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>getErrorMessage(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**message);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classPKCanScan_1ad3d2cb2aba9654055c73ae2751cbf1de" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>Log::LogComponentHandle<sp/><ref refid="classPKCanScan_1ad3d2cb2aba9654055c73ae2751cbf1de" kindref="member">s_logItHandlePk</ref>;</highlight></codeline>
<codeline lineno="63" refid="classPKCanScan_1ae1ff02a4576fe6d7276843e3821408c8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPKCanScan_1ae1ff02a4576fe6d7276843e3821408c8" kindref="member">s_logItRegisteredPk</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>TPCANHandle<sp/>getHandle(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>sendErrorCode(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>main<sp/>control<sp/>thread<sp/>function<sp/>for<sp/>the<sp/>CAN<sp/>update<sp/>scan<sp/>manager.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref><sp/><ref refid="AnaCanScan_8cpp_1a9aa60e1ead64be77ad551e745cbfd4d3" kindref="member">WINAPI</ref><sp/>CanScanControlThread(LPVOID<sp/>pCanScan);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Instance<sp/>of<sp/>Can<sp/>Statistics</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classPKCanScan_1a03eec54c44937d843f48b2b1a086b37b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanStatistics" kindref="compound">CanStatistics</ref><sp/><ref refid="classPKCanScan_1a03eec54c44937d843f48b2b1a086b37b" kindref="member">m_statistics</ref>;</highlight></codeline>
<codeline lineno="74" refid="classPKCanScan_1a1c361b38cbc6016192fbcd9a6d81236c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TPCANStatus<sp/><ref refid="classPKCanScan_1a1c361b38cbc6016192fbcd9a6d81236c" kindref="member">m_busStatus</ref>;</highlight></codeline>
<codeline lineno="75" refid="classPKCanScan_1afc2d4388c9cc8b562f315a55e7ad8bab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classPKCanScan_1afc2d4388c9cc8b562f315a55e7ad8bab" kindref="member">m_CanScanThreadShutdownFlag</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Current<sp/>baud<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classPKCanScan_1a84e9c4874e065b79d5600c0a5f9f7877" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classPKCanScan_1a84e9c4874e065b79d5600c0a5f9f7877" kindref="member">m_baudRate</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Instance<sp/>of<sp/>the<sp/>can<sp/>handle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classPKCanScan_1a8f07d0272238592477299480f48ae193" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>TPCANHandle<sp/><ref refid="classPKCanScan_1a8f07d0272238592477299480f48ae193" kindref="member">m_canObjHandler</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>configureCanboard(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parameters);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classPKCanScan_1a169a32c5961996acbd55aa5c12118de0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>HANDLE<sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPKCanScan_1a169a32c5961996acbd55aa5c12118de0" kindref="member">m_hCanScanThread</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>HANDLE<sp/><sp/><sp/><sp/><sp/><sp/>m_ReadEvent;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Thread<sp/>ID<sp/>for<sp/>the<sp/>CAN<sp/>update<sp/>scan<sp/>manager<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classPKCanScan_1a5ba2a765e250376fde32db88272339d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="AnaCanScan_8h_1ad342ac907eb044443153a22f964bf0af" kindref="member">DWORD</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classPKCanScan_1a5ba2a765e250376fde32db88272339d6" kindref="member">m_idCanScanThread</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal">};</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/mludwig/projects/CanModule/CanModule-sphinx2/CanInterfaceImplementations/pkcan/pkcan.h"/>
  </compounddef>
</doxygen>
