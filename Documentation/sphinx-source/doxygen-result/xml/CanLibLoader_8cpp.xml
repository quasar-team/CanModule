<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="CanLibLoader_8cpp" kind="file">
    <compoundname>CanLibLoader.cpp</compoundname>
    <includes refid="CanLibLoader_8h" local="yes">CanLibLoader.h</includes>
    <includes local="yes">LogIt.h</includes>
    <includes local="no">string</includes>
    <includes local="no">stdexcept</includes>
    <includes refid="CanLibLoaderLin_8h" local="yes">CanLibLoaderLin.h</includes>
    <incdepgraph>
      <node id="454">
        <label>stdatomic.h</label>
      </node>
      <node id="457">
        <label>LogIt.h</label>
      </node>
      <node id="455">
        <label>ExportDefinition.h</label>
        <link refid="ExportDefinition_8h"/>
      </node>
      <node id="451">
        <label>boost/signals2.hpp</label>
      </node>
      <node id="458">
        <label>stdexcept</label>
      </node>
      <node id="446">
        <label>string</label>
      </node>
      <node id="447">
        <label>map</label>
      </node>
      <node id="444">
        <label>CanLibLoader/src/CanLibLoader.cpp</label>
        <link refid="CanLibLoader.cpp"/>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="445">
        <label>CanLibLoader.h</label>
        <link refid="CanLibLoader_8h"/>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>sys/time.h</label>
      </node>
      <node id="453">
        <label>CanStatistics.h</label>
        <link refid="CanStatistics_8h"/>
        <childnode refid="454" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="455" relation="include">
        </childnode>
        <childnode refid="456" relation="include">
        </childnode>
      </node>
      <node id="450">
        <label>boost/bind.hpp</label>
      </node>
      <node id="456">
        <label>chrono</label>
      </node>
      <node id="452">
        <label>CanMessage.h</label>
        <link refid="CanMessage_8h"/>
        <childnode refid="449" relation="include">
        </childnode>
      </node>
      <node id="459">
        <label>CanLibLoaderLin.h</label>
        <link refid="CanLibLoaderLin_8h"/>
        <childnode refid="445" relation="include">
        </childnode>
      </node>
      <node id="448">
        <label>CCanAccess.h</label>
        <link refid="CCanAccess_8h"/>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceCanModule">CanModule</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanLibLoader_8h" kindref="compound">CanLibLoader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;LogIt.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight></codeline>
<codeline lineno="28"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanLibLoaderWin_8h" kindref="compound">CanLibLoaderWin.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="CanLibLoaderLin_8h" kindref="compound">CanLibLoaderLin.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">CanModule</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classCanModule_1_1CanLibLoader_1aa303c1dd64affa5c27f707e0306786a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CanLibLoader::CanLibLoader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)<sp/><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LogItInstance<sp/>*logIt<sp/>=<sp/>LogItInstance::getInstance();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logIt-&gt;getComponentHandle(<sp/><ref refid="namespaceCanModule_1a78730a18f59663871883885f3914a2aa" kindref="member">CanModule::LogItComponentName</ref>,<sp/>lh<sp/>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::TRC,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;logItComponentHandle=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>lh;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="classCanModule_1_1CanLibLoader_1aaf19503282f3fe164c434674721c4972" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CanLibLoader::~CanLibLoader()<sp/>{}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classCanModule_1_1CanLibLoader_1ab22f43105bfc9cab3c0749b83c867352" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref>*<sp/>CanLibLoader::createInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>libName)<sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CanLibLoader" kindref="compound">CanLibLoader</ref>*<sp/>ret;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>WIN32</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanLibLoaderWin" kindref="compound">CanLibLoaderWin</ref>(libName);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classCanModule_1_1CanLibLoaderLin" kindref="compound">CanLibLoaderLin</ref>(libName);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classCanModule_1_1CanLibLoader_1acd7d3af103bb72d5bd18737333d682f4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CanLibLoader::closeCanBus(<ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*cInter)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Canbus<sp/>name<sp/>to<sp/>be<sp/>deleted:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cInter-&gt;<ref refid="classCanModule_1_1CCanAccess_1ac3f5126ae36d642217425e21696d19ca" kindref="member">getBusName</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>m_openCanAccessMap.erase(cInter-&gt;getBusName().c_str());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>cInter;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classCanModule_1_1CanLibLoader_1aaac995d89efdcf2b673cbd3e678be55b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref>*<sp/>CanLibLoader::openCanBus(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>parameters)<sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Creating<sp/>CCanAccess:<sp/>name=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parameters;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classCanModule_1_1CCanAccess" kindref="compound">CCanAccess</ref><sp/>*tcca<sp/>=<sp/>createCanAccess();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!tcca<sp/>){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>failed<sp/>to<sp/>create<sp/>CCanAccess<sp/>name=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parameters;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exit(-1);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>created<sp/>CCanAccess<sp/>name=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parameters;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//The<sp/>Logit<sp/>instance<sp/>of<sp/>the<sp/>executable<sp/>is<sp/>handled<sp/>to<sp/>the<sp/>DLL<sp/>at<sp/>this<sp/>point,<sp/>so<sp/>the<sp/>instance<sp/>is<sp/>shared.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tcca-&gt;<ref refid="classCanModule_1_1CCanAccess_1ab5a430fc27073d92c69659bda261b74d" kindref="member">initialiseLogging</ref>(<sp/>LogItInstance::getInstance()<sp/>);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Logging<sp/>initialized<sp/>OK&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>calling<sp/>createBus.<sp/>name=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>parameters=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>parameters;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>tcca-&gt;<ref refid="classCanModule_1_1CCanAccess_1a78590d342bc4f3433544d45371ca05ce" kindref="member">createBus</ref>(name,<sp/>parameters);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c)<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::DBG,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>OK:<sp/>createBus<sp/>Adding<sp/>CCanAccess<sp/>to<sp/>the<sp/>map<sp/>for:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tcca;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LOG(Log::ERR,<sp/>lh<sp/>)<sp/>&lt;&lt;<sp/>__FUNCTION__<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>createBus<sp/>Problem<sp/>opening<sp/>canBus<sp/>for:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>name;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;CanLibLoader::openCanBus:<sp/>createBus<sp/>Problem<sp/>when<sp/>opening<sp/>canBus.<sp/>stop.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/mludwig/projects/CanModule/CanModule-OPCUA-1421/CanModule/CanLibLoader/src/CanLibLoader.cpp"/>
  </compounddef>
</doxygen>
